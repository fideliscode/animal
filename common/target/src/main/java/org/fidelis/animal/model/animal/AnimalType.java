// license-header java merge-point
//
/**
 * @author Generated by TypeSafeEnumeration.vsl in andromda-java-cartridge on 04/03/2022 18:05:33+0300 Do not modify by hand!
 *
 * TEMPLATE:     TypeSafeEnumeration.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::org.fidelis.animal::model::animal::AnimalType
 * STEREOTYPE:   Enumeration
 */
//
package org.fidelis.animal.model.animal;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO: Model Documentation for org.fidelis.animal.model.animal.AnimalType
 */
public enum AnimalType
{
    /** TODO: Model Documentation for Enumeration Literal COW value "Cow" */
    COW("Cow"),
    /** TODO: Model Documentation for Enumeration Literal DONKEY value "Donckey" */
    DONKEY("Donckey"),
    /** TODO: Model Documentation for Enumeration Literal GOAT value "Goat" */
    GOAT("Goat"),
    /** TODO: Model Documentation for Enumeration Literal SHEEP value "Sheep" */
    SHEEP("Sheep"),
    /** TODO: Model Documentation for Enumeration Literal HORSE value "Horse" */
    HORSE("Horse"),
    /** TODO: Model Documentation for Enumeration Literal DOG value "Dog" */
    DOG("Dog"),
    /** TODO: Model Documentation for Enumeration Literal PIG value "Pig" */
    PIG("Pig");

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -518432680705703573L;

    private final String enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private AnimalType(String value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of AnimalType from <code>its name</code>.
     *
     * @param name the name to create the AnimalType from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static AnimalType fromString(String name)
    {
        return AnimalType.valueOf(name);
    }

    /**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of AnimalType from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the AnimalType from.
     * @return static Enumeration with corresponding value
     */
    public static AnimalType fromValue(String value)
    {
        // Allow either the Enum name or value string to be used to retrieve the enum
        for (AnimalType enumName: AnimalType.values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        for (String enumName: AnimalType.names())
        {
            if (enumName.equals(value))
            {
                return AnimalType.valueOf(enumName);
            }
        }
        throw new IllegalArgumentException("AnimalType.fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return AnimalType.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return AnimalType.names;
    }

    private static Map<String, AnimalType> values = new LinkedHashMap<String, AnimalType>(7, 1);
    private static List<String> literals = new ArrayList<String>(7);
    private static List<String> names = new ArrayList<String>(7);
    private static List<AnimalType> valueList = new ArrayList<AnimalType>(7);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (AnimalType.values)
        {
            AnimalType.values.put(COW.enumValue, COW);
            AnimalType.values.put(DONKEY.enumValue, DONKEY);
            AnimalType.values.put(GOAT.enumValue, GOAT);
            AnimalType.values.put(SHEEP.enumValue, SHEEP);
            AnimalType.values.put(HORSE.enumValue, HORSE);
            AnimalType.values.put(DOG.enumValue, DOG);
            AnimalType.values.put(PIG.enumValue, PIG);
        }
        synchronized (AnimalType.valueList)
        {
            AnimalType.valueList.add(COW);
            AnimalType.valueList.add(DONKEY);
            AnimalType.valueList.add(GOAT);
            AnimalType.valueList.add(SHEEP);
            AnimalType.valueList.add(HORSE);
            AnimalType.valueList.add(DOG);
            AnimalType.valueList.add(PIG);
            AnimalType.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (AnimalType.literals)
        {
            AnimalType.literals.add(COW.enumValue);
            AnimalType.literals.add(DONKEY.enumValue);
            AnimalType.literals.add(GOAT.enumValue);
            AnimalType.literals.add(SHEEP.enumValue);
            AnimalType.literals.add(HORSE.enumValue);
            AnimalType.literals.add(DOG.enumValue);
            AnimalType.literals.add(PIG.enumValue);
            AnimalType.literals = Collections.unmodifiableList(literals);
        }
        synchronized (AnimalType.names)
        {
            AnimalType.names.add("COW");
            AnimalType.names.add("DONKEY");
            AnimalType.names.add("GOAT");
            AnimalType.names.add("SHEEP");
            AnimalType.names.add("HORSE");
            AnimalType.names.add("DOG");
            AnimalType.names.add("PIG");
            AnimalType.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}