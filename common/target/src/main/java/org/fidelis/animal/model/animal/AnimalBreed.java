// license-header java merge-point
//
/**
 * @author Generated by TypeSafeEnumeration.vsl in andromda-java-cartridge on 04/03/2022 18:05:33+0300 Do not modify by hand!
 *
 * TEMPLATE:     TypeSafeEnumeration.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::org.fidelis.animal::model::animal::AnimalBreed
 * STEREOTYPE:   Enumeration
 */
//
package org.fidelis.animal.model.animal;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO: Model Documentation for org.fidelis.animal.model.animal.AnimalBreed
 */
public enum AnimalBreed
{
    /** TODO: Model Documentation for Enumeration Literal DUPI value "Dupi" */
    DUPI("Dupi"),
    /** TODO: Model Documentation for Enumeration Literal LARGE_WHITE value "Large White" */
    LARGE_WHITE("Large White"),
    /** TODO: Model Documentation for Enumeration Literal PIETRAINN value "Pietrain" */
    PIETRAINN("Pietrain"),
    /** TODO: Model Documentation for Enumeration Literal LANDRACE value "Landrace" */
    LANDRACE("Landrace"),
    /** TODO: Model Documentation for Enumeration Literal DUROC value "Duroc" */
    DUROC("Duroc"),
    /** TODO: Model Documentation for Enumeration Literal HAMPSHIRE value "Hampshire" */
    HAMPSHIRE("Hampshire"),
    /** TODO: Model Documentation for Enumeration Literal ESTONIAN_BACON value "Estonian Bacon" */
    ESTONIAN_BACON("Estonian Bacon"),
    /** TODO: Model Documentation for Enumeration Literal HYBREED value "Hybreed" */
    HYBREED("Hybreed");

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 6047939597623046665L;

    private final String enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private AnimalBreed(String value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of AnimalBreed from <code>its name</code>.
     *
     * @param name the name to create the AnimalBreed from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static AnimalBreed fromString(String name)
    {
        return AnimalBreed.valueOf(name);
    }

    /**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of AnimalBreed from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the AnimalBreed from.
     * @return static Enumeration with corresponding value
     */
    public static AnimalBreed fromValue(String value)
    {
        // Allow either the Enum name or value string to be used to retrieve the enum
        for (AnimalBreed enumName: AnimalBreed.values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        for (String enumName: AnimalBreed.names())
        {
            if (enumName.equals(value))
            {
                return AnimalBreed.valueOf(enumName);
            }
        }
        throw new IllegalArgumentException("AnimalBreed.fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return AnimalBreed.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return AnimalBreed.names;
    }

    private static Map<String, AnimalBreed> values = new LinkedHashMap<String, AnimalBreed>(8, 1);
    private static List<String> literals = new ArrayList<String>(8);
    private static List<String> names = new ArrayList<String>(8);
    private static List<AnimalBreed> valueList = new ArrayList<AnimalBreed>(8);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (AnimalBreed.values)
        {
            AnimalBreed.values.put(DUPI.enumValue, DUPI);
            AnimalBreed.values.put(LARGE_WHITE.enumValue, LARGE_WHITE);
            AnimalBreed.values.put(PIETRAINN.enumValue, PIETRAINN);
            AnimalBreed.values.put(LANDRACE.enumValue, LANDRACE);
            AnimalBreed.values.put(DUROC.enumValue, DUROC);
            AnimalBreed.values.put(HAMPSHIRE.enumValue, HAMPSHIRE);
            AnimalBreed.values.put(ESTONIAN_BACON.enumValue, ESTONIAN_BACON);
            AnimalBreed.values.put(HYBREED.enumValue, HYBREED);
        }
        synchronized (AnimalBreed.valueList)
        {
            AnimalBreed.valueList.add(DUPI);
            AnimalBreed.valueList.add(LARGE_WHITE);
            AnimalBreed.valueList.add(PIETRAINN);
            AnimalBreed.valueList.add(LANDRACE);
            AnimalBreed.valueList.add(DUROC);
            AnimalBreed.valueList.add(HAMPSHIRE);
            AnimalBreed.valueList.add(ESTONIAN_BACON);
            AnimalBreed.valueList.add(HYBREED);
            AnimalBreed.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (AnimalBreed.literals)
        {
            AnimalBreed.literals.add(DUPI.enumValue);
            AnimalBreed.literals.add(LARGE_WHITE.enumValue);
            AnimalBreed.literals.add(PIETRAINN.enumValue);
            AnimalBreed.literals.add(LANDRACE.enumValue);
            AnimalBreed.literals.add(DUROC.enumValue);
            AnimalBreed.literals.add(HAMPSHIRE.enumValue);
            AnimalBreed.literals.add(ESTONIAN_BACON.enumValue);
            AnimalBreed.literals.add(HYBREED.enumValue);
            AnimalBreed.literals = Collections.unmodifiableList(literals);
        }
        synchronized (AnimalBreed.names)
        {
            AnimalBreed.names.add("DUPI");
            AnimalBreed.names.add("LARGE_WHITE");
            AnimalBreed.names.add("PIETRAINN");
            AnimalBreed.names.add("LANDRACE");
            AnimalBreed.names.add("DUROC");
            AnimalBreed.names.add("HAMPSHIRE");
            AnimalBreed.names.add("ESTONIAN_BACON");
            AnimalBreed.names.add("HYBREED");
            AnimalBreed.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}