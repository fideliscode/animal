// license-header java merge-point
//
/**
 * @author Generated by ValueObject.vsl in andromda-java-cartridge on 04/03/2022 18:05:33+0300 Do not modify by hand!
 *
 * TEMPLATE:     ValueObject.vsl in andromda-java-cartridge.
 * MODEL CLASS:  AndroMDAModel::org.fidelis.animal::model::document::DocumentVO
 * STEREOTYPE:   ValueObject
 */
package org.fidelis.animal.model.document;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Date;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * TODO: Model Documentation for DocumentVO
 */
public class DocumentVO
    implements Serializable, Comparable<DocumentVO>
{
    /** The serial version UID of this class. Needed for serialization. */
    private static final long serialVersionUID = -8811905804134757996L;

    // Class attributes
    /**
     * TODO: Model Documentation for DocumentVO.id
     */
    protected Long id;
    /**
     * TODO: Model Documentation for DocumentVO.documentType
     */
    protected String documentType;
    /**
     * TODO: Model Documentation for DocumentVO.dated
     */
    protected Date dated;
    /**
     * TODO: Model Documentation for DocumentVO.reference
     */
    protected Long reference;
    /**
     * TODO: Model Documentation for DocumentVO.name
     */
    protected String name;
    /**
     * TODO: Model Documentation for DocumentVO.description
     */
    protected String description;
    /**
     * TODO: Model Documentation for DocumentVO.extension
     */
    protected String extension;
    /**
     * TODO: Model Documentation for DocumentVO.urlImage
     */
    protected String urlImage;
    /**
     * TODO: Model Documentation for DocumentVO.guid
     */
    protected String guid;
    /**
     * TODO: Model Documentation for DocumentVO.recordType
     */
    protected String recordType;
    /**
     * TODO: Model Documentation for DocumentVO.month
     */
    protected String month;
    /**
     * TODO: Model Documentation for DocumentVO.year
     */
    protected String year;

    /** Default Constructor with no properties */
    public DocumentVO()
    {
        // Documented empty block - avoid compiler warning - no super constructor
    }

    /**
     * Constructor taking only required properties
     * @param documentTypeIn String TODO: Model Documentation for DocumentVO.documentType
     * @param datedIn Date TODO: Model Documentation for DocumentVO.dated
     * @param recordTypeIn String TODO: Model Documentation for DocumentVO.recordType
     */
    public DocumentVO(final String documentTypeIn, final Date datedIn, final String recordTypeIn)
    {
        this.documentType = documentTypeIn;
        this.dated = datedIn;
        this.recordType = recordTypeIn;
    }

    /**
     * Constructor with all properties
     * @param idIn Long
     * @param documentTypeIn String
     * @param datedIn Date
     * @param referenceIn Long
     * @param nameIn String
     * @param descriptionIn String
     * @param extensionIn String
     * @param urlImageIn String
     * @param guidIn String
     * @param recordTypeIn String
     * @param monthIn String
     * @param yearIn String
     */
    public DocumentVO(final Long idIn, final String documentTypeIn, final Date datedIn, final Long referenceIn, final String nameIn, final String descriptionIn, final String extensionIn, final String urlImageIn, final String guidIn, final String recordTypeIn, final String monthIn, final String yearIn)
    {
        this.id = idIn;
        this.documentType = documentTypeIn;
        this.dated = datedIn;
        this.reference = referenceIn;
        this.name = nameIn;
        this.description = descriptionIn;
        this.extension = extensionIn;
        this.urlImage = urlImageIn;
        this.guid = guidIn;
        this.recordType = recordTypeIn;
        this.month = monthIn;
        this.year = yearIn;
    }

    /**
     * Copies constructor from other DocumentVO
     *
     * @param otherBean Cannot be <code>null</code>
     * @throws NullPointerException if the argument is <code>null</code>
     */
    public DocumentVO(final DocumentVO otherBean)
    {
        this.id = otherBean.getId();
        this.documentType = otherBean.getDocumentType();
        this.dated = otherBean.getDated();
        this.reference = otherBean.getReference();
        this.name = otherBean.getName();
        this.description = otherBean.getDescription();
        this.extension = otherBean.getExtension();
        this.urlImage = otherBean.getUrlImage();
        this.guid = otherBean.getGuid();
        this.recordType = otherBean.getRecordType();
        this.month = otherBean.getMonth();
        this.year = otherBean.getYear();
    }

    /**
     * Copies all properties from the argument value object into this value object.
     * @param otherBean Cannot be <code>null</code>
     */
    public void copy(final DocumentVO otherBean)
    {
        if (null != otherBean)
        {
            this.setId(otherBean.getId());
            this.setDocumentType(otherBean.getDocumentType());
            this.setDated(otherBean.getDated());
            this.setReference(otherBean.getReference());
            this.setName(otherBean.getName());
            this.setDescription(otherBean.getDescription());
            this.setExtension(otherBean.getExtension());
            this.setUrlImage(otherBean.getUrlImage());
            this.setGuid(otherBean.getGuid());
            this.setRecordType(otherBean.getRecordType());
            this.setMonth(otherBean.getMonth());
            this.setYear(otherBean.getYear());
        }
    }

    /**
     * TODO: Model Documentation for DocumentVO.id
     * Get the id Attribute
     * @return id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for DocumentVO.id
     * @param value Long
     */
    public void setId(final Long value)
    {
        this.id = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.documentType
     * Get the documentType Attribute
     * @return documentType String
     */
    public String getDocumentType()
    {
        return this.documentType;
    }

    /**
     * TODO: Model Documentation for DocumentVO.documentType
     * @param value String
     */
    public void setDocumentType(final String value)
    {
        this.documentType = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.dated
     * Get the dated Attribute
     * @return dated Date
     */
    public Date getDated()
    {
        return this.dated;
    }

    /**
     * TODO: Model Documentation for DocumentVO.dated
     * @param value Date
     */
    public void setDated(final Date value)
    {
        this.dated = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.reference
     * Get the reference Attribute
     * @return reference Long
     */
    public Long getReference()
    {
        return this.reference;
    }

    /**
     * TODO: Model Documentation for DocumentVO.reference
     * @param value Long
     */
    public void setReference(final Long value)
    {
        this.reference = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.name
     * Get the name Attribute
     * @return name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for DocumentVO.name
     * @param value String
     */
    public void setName(final String value)
    {
        this.name = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.description
     * Get the description Attribute
     * @return description String
     */
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for DocumentVO.description
     * @param value String
     */
    public void setDescription(final String value)
    {
        this.description = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.extension
     * Get the extension Attribute
     * @return extension String
     */
    public String getExtension()
    {
        return this.extension;
    }

    /**
     * TODO: Model Documentation for DocumentVO.extension
     * @param value String
     */
    public void setExtension(final String value)
    {
        this.extension = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.urlImage
     * Get the urlImage Attribute
     * @return urlImage String
     */
    public String getUrlImage()
    {
        return this.urlImage;
    }

    /**
     * TODO: Model Documentation for DocumentVO.urlImage
     * @param value String
     */
    public void setUrlImage(final String value)
    {
        this.urlImage = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.guid
     * Get the guid Attribute
     * @return guid String
     */
    public String getGuid()
    {
        return this.guid;
    }

    /**
     * TODO: Model Documentation for DocumentVO.guid
     * @param value String
     */
    public void setGuid(final String value)
    {
        this.guid = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.recordType
     * Get the recordType Attribute
     * @return recordType String
     */
    public String getRecordType()
    {
        return this.recordType;
    }

    /**
     * TODO: Model Documentation for DocumentVO.recordType
     * @param value String
     */
    public void setRecordType(final String value)
    {
        this.recordType = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.month
     * Get the month Attribute
     * @return month String
     */
    public String getMonth()
    {
        return this.month;
    }

    /**
     * TODO: Model Documentation for DocumentVO.month
     * @param value String
     */
    public void setMonth(final String value)
    {
        this.month = value;
    }

    /**
     * TODO: Model Documentation for DocumentVO.year
     * Get the year Attribute
     * @return year String
     */
    public String getYear()
    {
        return this.year;
    }

    /**
     * TODO: Model Documentation for DocumentVO.year
     * @param value String
     */
    public void setYear(final String value)
    {
        this.year = value;
    }

    /**
     * @param object to compare this object against
     * @return boolean if equal
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(final Object object)
    {
        if (object==null || object.getClass() != this.getClass())
        {
             return false;
        }
        // Check if the same object instance
        if (object==this)
        {
            return true;
        }
        DocumentVO rhs = (DocumentVO) object;
        return new EqualsBuilder()
            .append(this.getId(), rhs.getId())
            .append(this.getDocumentType(), rhs.getDocumentType())
            .append(this.getDated(), rhs.getDated())
            .append(this.getReference(), rhs.getReference())
            .append(this.getName(), rhs.getName())
            .append(this.getDescription(), rhs.getDescription())
            .append(this.getExtension(), rhs.getExtension())
            .append(this.getUrlImage(), rhs.getUrlImage())
            .append(this.getGuid(), rhs.getGuid())
            .append(this.getRecordType(), rhs.getRecordType())
            .append(this.getMonth(), rhs.getMonth())
            .append(this.getYear(), rhs.getYear())
            .isEquals();
    }

    /**
     * @param object to compare this object against
     * @return int if equal
     * @see Comparable#compareTo(Object)
     */
    public int compareTo(final DocumentVO object)
    {
        if (object==null)
        {
            return -1;
        }
        // Check if the same object instance
        if (object==this)
        {
            return 0;
        }
        return new CompareToBuilder()
            .append(this.getId(), object.getId())
            .append(this.getDocumentType(), object.getDocumentType())
            .append(this.getDated(), object.getDated())
            .append(this.getReference(), object.getReference())
            .append(this.getName(), object.getName())
            .append(this.getDescription(), object.getDescription())
            .append(this.getExtension(), object.getExtension())
            .append(this.getUrlImage(), object.getUrlImage())
            .append(this.getGuid(), object.getGuid())
            .append(this.getRecordType(), object.getRecordType())
            .append(this.getMonth(), object.getMonth())
            .append(this.getYear(), object.getYear())
            .toComparison();
    }

    /**
     * @return int hashCode value
     * @see Object#hashCode()
     */
    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(1249046965, -82296885)
            .append(this.getId())
            .append(this.getDocumentType())
            .append(this.getDated())
            .append(this.getReference())
            .append(this.getName())
            .append(this.getDescription())
            .append(this.getExtension())
            .append(this.getUrlImage())
            .append(this.getGuid())
            .append(this.getRecordType())
            .append(this.getMonth())
            .append(this.getYear())
            .toHashCode();
    }

    /**
     * @return String representation of object
     * @see Object#toString()
     */
    @Override
    public String toString()
    {
        return new ToStringBuilder(this)
            .append("id", this.getId())
            .append("documentType", this.getDocumentType())
            .append("dated", this.getDated())
            .append("reference", this.getReference())
            .append("name", this.getName())
            .append("description", this.getDescription())
            .append("extension", this.getExtension())
            .append("urlImage", this.getUrlImage())
            .append("guid", this.getGuid())
            .append("recordType", this.getRecordType())
            .append("month", this.getMonth())
            .append("year", this.getYear())
            .toString();
    }

    /**
     * Compares the properties of this instance to the properties of the argument. This method will return
     * {@code false} as soon as it detects that the argument is {@code null} or not of the same type as
     * (or a sub-type of) this instance's type.
     *
     * <p/>For array, collection or map properties the comparison will be done one level deep, in other words:
     * the elements will be compared using the {@code equals()} operation.
     *
     * <p/>Note that two properties will be considered equal when both values are {@code null}.
     *
     * @param thatObject the object containing the properties to compare against this instance
     * @return this method will return {@code true} in case the argument has the same type as this class, or is a
     *      sub-type of this class and all properties as found on this class have equal values when queried on that
     *      argument instance; in all other cases this method will return {@code false}
     */
    public boolean equalProperties(final Object thatObject)
    {
        if (thatObject == null || !this.getClass().isAssignableFrom(thatObject.getClass()))
        {
            return false;
        }

        final DocumentVO that = (DocumentVO)thatObject;
        return
            equal(this.getId(), that.getId())
            && equal(this.getDocumentType(), that.getDocumentType())
            && equal(this.getDated(), that.getDated())
            && equal(this.getReference(), that.getReference())
            && equal(this.getName(), that.getName())
            && equal(this.getDescription(), that.getDescription())
            && equal(this.getExtension(), that.getExtension())
            && equal(this.getUrlImage(), that.getUrlImage())
            && equal(this.getGuid(), that.getGuid())
            && equal(this.getRecordType(), that.getRecordType())
            && equal(this.getMonth(), that.getMonth())
            && equal(this.getYear(), that.getYear())
        ;
    }

    /**
     * This is a convenient helper method which is able to detect whether or not two values are equal. Two values
     * are equal when they are both {@code null}, are arrays of the same length with equal elements or are
     * equal objects (this includes {@link java.util.Collection} and {@link java.util.Map} instances).
     *
     * <p/>Note that for array, collection or map instances the comparison runs one level deep.
     *
     * @param first the first object to compare, may be {@code null}
     * @param second the second object to compare, may be {@code null}
     * @return this method will return {@code true} in case both objects are equal as explained above;
     *      in all other cases this method will return {@code false}
     */
    protected static boolean equal(final Object first, final Object second)
    {
        final boolean equal;

        if (first == null)
        {
            equal = (second == null);
        }
        else if (first.getClass().isArray() && (second != null) && second.getClass().isArray())
        {
            equal = Arrays.equals((Object[])first, (Object[])second);
        }
        else // note that the following also covers java.util.Collection and java.util.Map
        {
            equal = first.equals(second);
        }

        return equal;
    }

    // DocumentVO value-object java merge-point
}