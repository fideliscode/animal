// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\ControllerImpl.java.vsl)
package org.fidelis.animal.web.document.add;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.UUID;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpServletRequest;
import org.fidelis.animal.ServiceLocator;
import org.fidelis.animal.model.document.DocumentType;
import org.fidelis.animal.model.setting.RecordType;
import org.fidelis.animal.model.utils.RootFolder;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.UploadedFile;

/**
 * @see org.fidelis.animal.web.document.add.AddDocumentController
 */
public class AddDocumentControllerImpl
        extends AddDocumentController {

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5490503140255213504L;

    /**
     * @see
     * org.fidelis.animal.web.document.add.AddDocumentController#loadOptions(String
     * documentType, java.lang.Long reference, String recordType, java.lang.Long
     * id)
     */
    @Override
    public void loadOptions(LoadOptionsForm form) throws Exception{
        try {
            HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
            final Collection documentTypeBackingList = new ArrayList<SelectItem>();
            documentTypeBackingList.addAll(DocumentType.literals());
            form.setDocumentTypeBackingList(documentTypeBackingList);
            form.setReference(form.getId());
            
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }

    }

    /**
     * @see
     * org.fidelis.animal.web.document.add.AddDocumentController#add(java.lang.Long
     * id, String documentType, String recordType, java.lang.Long reference,
     * String description)
     */
    public void  handleFileUpload(FileUploadEvent event) throws Exception {
        try {
           
            AddDocumentUploadFormImpl form = this.getAddDocumentUploadForm();
            
            HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
            System.out.println("In The addddd method");
            UploadedFile document = event.getFile();
            String fileName =document.getFileName();
            String extension = "";
            int year = Calendar.getInstance().get(Calendar.YEAR);
            int month = Calendar.getInstance().get(Calendar.MONTH) + 1;

            String filePath = RootFolder.getRootPath(request,
                    "/animal-documents/uploads/" + form.getRecordType().toUpperCase().replace(" ", "_")
                    + "/" + year + "/" + month);
            int i;
            if ((i = fileName.lastIndexOf(".")) != -1) {//get extension and the filename as uploaded by the user
                extension = fileName.substring(i);

                if (extension.equals(".docx") || extension.equals(".doc")) {
                    throw new Exception("Please upload pdf document!!");
                }
                fileName = fileName.substring(0, i);
            }

            if (!fileName.isEmpty()) {//uploaded document should at least have a name
                File subDir = new File(filePath, System.getProperty("file.separator"));
                if (!subDir.exists()) {
                    subDir.mkdirs();
                }
                filePath = subDir.toString();
                String guid = UUID.randomUUID().toString();
                File fileToCreate = new File(filePath, System.getProperty("file.separator")
                        + guid);
                if (fileToCreate.exists()) {
                    try {
                        fileToCreate.delete();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        throw ex;
                    }
                }
                if (!fileToCreate.exists()) {
                    try {
                        FileOutputStream fileOutStream = new FileOutputStream(fileToCreate);
                        fileOutStream.write(document.getContents());
                        fileOutStream.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        throw ex;
                    }
                    try {
                        if (form.getId() != null) {
                            ServiceLocator.instance().getDocumentService().add(form.getDocumentType(),
                                    new Date(), form.getReference(),
                                    fileName, form.getDescription(),
                                    extension, guid,form.getRecordType());
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        throw ex;
                    }
                }
                request.setAttribute("fileName", fileName);
                FacesMessage msg = new FacesMessage("File " + fileName
                        + " has been uploaded successfully!!");
                FacesContext.getCurrentInstance().addMessage(null, msg);
            } else {
                throw new Exception("Please Upload a named document!!");
            }
            this.add(form);

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }
    
    
    @Override
    public void add(AddForm form) throws Exception {
        try {


        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }

    }

    /**
     * @see
     * org.fidelis.animal.web.document.add.AddDocumentController#checkRecordType(java.lang.Long
     * id, String recordType)
     */
    @Override
    public String checkRecordType(CheckRecordTypeForm form) {
        HttpServletRequest req = (HttpServletRequest) FacesContext.getCurrentInstance()
                .getExternalContext().getRequest();
        if (req.getAttribute("id") != null) {
            form.setId((Long) req.getAttribute("id"));
        }
        String type = null;
        if (RecordType.ANIMAL.getValue().equals(form.getRecordType())) {
            type = "animal";
        } else if (RecordType.FEED.getValue().equals(form.getRecordType())) {
            type = "feed";
        }

        return type;
    }

}
