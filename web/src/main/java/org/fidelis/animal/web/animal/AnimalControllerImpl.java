// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\ControllerImpl.java.vsl)
package org.fidelis.animal.web.animal;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpServletRequest;
import org.fidelis.animal.ServiceLocator;
import org.fidelis.animal.model.animal.AnimalType;
import org.fidelis.animal.model.animal.AnimalVO;
import org.fidelis.animal.model.feed.FeedVO;
import org.fidelis.animal.model.animal.AnimalBreed;
import org.fidelis.animal.model.setting.RecordType;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
//import java.util.Calendar ;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import net.fortuna.ical4j.data.CalendarOutputter;
import net.fortuna.ical4j.data.HCalendarParserFactory;
import net.fortuna.ical4j.model.DefaultTimeZoneRegistryFactory;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.property.CalScale;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Uid;
import net.fortuna.ical4j.util.DefaultDecoderFactory;
import net.fortuna.ical4j.util.DefaultEncoderFactory;
import net.fortuna.ical4j.util.MapTimeZoneCache;
import net.fortuna.ical4j.util.RandomUidGenerator;
import net.fortuna.ical4j.util.UidGenerator;
import org.fidelis.animal.ValidationException;

/**
 * @see org.fidelis.animal.web.animal.AnimalController
 */
public class AnimalControllerImpl
        extends AnimalController {

    private Object feedObject;

    public Object getFeedObject() {
        return feedObject;
    }

    public void setFeedObject(Object feedObject) {
        this.feedObject = feedObject;
    }
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -6766319778772983363L;

    /**
     * @see org.fidelis.animal.web.animal.AnimalController#search(Collection
     * animals, java.lang.String type, java.util.Date startDate, java.util.Date
     * endDate)
     */
    @Override
    public void search(SearchForm form) throws Throwable {
        try {
            createCalender();
            final Collection<SelectItem> recordsLimitBackingList = new ArrayList();
            if (form.getLimit() == null) {
                form.setLimit(20L);
            }
            recordsLimitBackingList.add(new SelectItem(20L));
            recordsLimitBackingList.add(new SelectItem(50L));
            recordsLimitBackingList.add(new SelectItem(100L));
            recordsLimitBackingList.add(new SelectItem(500L));
            recordsLimitBackingList.add(new SelectItem(1000L));
            recordsLimitBackingList.add(new SelectItem(5000L));
            recordsLimitBackingList.add(new SelectItem(10000L));
            recordsLimitBackingList.add(new SelectItem(20000L));
            recordsLimitBackingList.add(new SelectItem(50000L));
            recordsLimitBackingList.add(new SelectItem(100000L));
            form.setLimitBackingList(recordsLimitBackingList);

            final Collection typeBackingList = new ArrayList<SelectItem>();
            typeBackingList.addAll(AnimalType.literals());
            form.setTypeBackingList(typeBackingList);

            final Collection breedBackingList = new ArrayList<SelectItem>();
            breedBackingList.addAll(AnimalBreed.literals());
            form.setBreedBackingList(breedBackingList);

            Collection<AnimalVO> animals = new ArrayList();
            animals.addAll(ServiceLocator.instance()
                    .getAnimalService().search(form.getType(), form.getStartDate(),
                            form.getEndDate(), form.getBreed(), 100L));
            // populating the table with a dummy list
            form.setAnimals(animals);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @see org.fidelis.animal.web.animal.AnimalController#load(java.lang.Long
     * id, java.lang.String type, java.util.Date dateOfBirth)
     */
    @Override
    public void load(LoadForm form) throws Throwable {
        try {
            AnimalVO animal = ServiceLocator.instance().getAnimalService().load(form.getId());
            form.setType(animal.getType());
            form.setDateOfBirth(animal.getDateOfBirth());
            form.setId(form.getId());
            form.setRecordType(RecordType.ANIMAL.getValue());
            if (animal.getFeedId() != null) {
                setFeedObject((FeedVO) ServiceLocator.instance().getFeedService().load(animal.getFeedId()));
            }
            form.setDocuments((Collection) ServiceLocator.instance().getDocumentService().loadByRecordTypeAndReference(RecordType.ANIMAL.name(), form.getId()));
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }

    }

    public void createCalender() {
        /* Event start and end time in milliseconds */
        Long startDateTimeInMillis = 1615956275000L;
        Long endDateTimeInMillis = 1615959875000L;

        java.util.Calendar calendarStartTime = new GregorianCalendar();
        calendarStartTime.setTimeInMillis(startDateTimeInMillis);

// Time zone info
        TimeZone tz = calendarStartTime.getTimeZone();
        ZoneId zid = tz.toZoneId();


        /* Generate unique identifier */
        UidGenerator ug = new RandomUidGenerator();
        Uid uid = ug.generateUid();
        System.setProperty("net.fortuna.ical4j.timezone.cache.impl", MapTimeZoneCache.class.getName());
        System.setProperty("net.fortuna.ical4j.parser", HCalendarParserFactory.class.getName());
        System.setProperty("net.fortuna.ical4j.timezone.registry", DefaultTimeZoneRegistryFactory.class.getName());
        System.setProperty("net.fortuna.ical4j.factory.decoder", DefaultDecoderFactory.class.getName());
        System.setProperty("net.fortuna.ical4j.factory.encoder", DefaultEncoderFactory.class.getName());
        System.setProperty("net.fortuna.ical4j.recur.maxincrementcount", "1000");
        /* Create the event */
        
        String eventSummary = "Happy New Year";
        LocalDateTime start = LocalDateTime.ofInstant(calendarStartTime.toInstant(), zid);
        LocalDateTime end = LocalDateTime.ofInstant(Instant.ofEpochMilli(endDateTimeInMillis), zid);
        VEvent event = new VEvent(start, end, eventSummary);
        event.getProperties().add(uid);
        event.getProperties().add(new ProdId("-//Ben Fortuna//iCal4j 1.0//EN"));

        /* Create calendar */
        net.fortuna.ical4j.model.Calendar calendar = new net.fortuna.ical4j.model.Calendar();
        calendar.getProperties().add(new ProdId("-//Ben Fortuna//iCal4j 1.0//EN"));
        calendar.getProperties().add(CalScale.GREGORIAN);

        /* Add event to calendar */
        calendar.getComponents().add(event);

        /* Create a file */
        String filePath = "C:\\InfoWise\\Projects\\IcsFile\\mymeeting.ics";
        FileOutputStream fout = null;
        try {

            fout = new FileOutputStream(filePath);
            CalendarOutputter outputter = new CalendarOutputter();
            System.out.println( outputter.toString());
            outputter.output(calendar, fout);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (ValidationException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fout != null) {
                try {
                    fout.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * @see org.fidelis.animal.web.animal.AnimalController#edit(java.lang.String
     * type, java.util.Date dateOfBirth, java.lang.Long id)
     */
    @Override
    public void edit(EditForm form) throws Throwable {
        try {
            Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();

            Long feed = null;
            for (Map.Entry<String, String> entry : params.entrySet()) {
                if (entry.getKey().contains("feed_hinput")) {
                    try {
                        feed = Long.parseLong(entry.getValue());
                        break;
                    } catch (Exception e) {
                        e.printStackTrace();
                        break;
                    }

                }
            }
            ServiceLocator.instance().getAnimalService()
                    .update(form.getId(), form.getDateOfBirth(),
                            form.getType(), feed, form.getBreed());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @see
     * org.fidelis.animal.web.animal.AnimalController#checkId(java.lang.Long id)
     */
    @Override
    public Boolean checkId(CheckIdForm form) throws Throwable {
        try {
            HttpServletRequest req = (HttpServletRequest) FacesContext
                    .getCurrentInstance().getExternalContext().getRequest();
            if (req.getParameter("id") != null) {
                form.setId(Long.parseLong(req.getParameter("id")));
            }
            if (req.getAttribute("id") != null) {
                form.setId((Long) req.getAttribute("id"));
            }
            return form.getId() != null;
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    public List<FeedVO> autoCompleteFeed(String query) throws Throwable {
        List<FeedVO> results = new ArrayList();
        try {
            Collection matchingFeedsByType = new ArrayList();
            matchingFeedsByType.addAll(ServiceLocator.instance().getFeedService()
                    .search(query, query, query, 100L));
            Collection matchingFeedsByCode = new ArrayList();
            matchingFeedsByCode.addAll(ServiceLocator.instance().getFeedService()
                    .search(null, query, null, 100L));
            Collection matchingFeedsByName = new ArrayList();
            matchingFeedsByName.addAll(ServiceLocator.instance().getFeedService()
                    .search(null, null, query, 100L));
            results.addAll(matchingFeedsByType);
            results.addAll(matchingFeedsByCode);
            results.addAll(matchingFeedsByName);
            Set c = new HashSet();
            c.addAll(results);
            results.clear();
            results.addAll(c);
            return results;

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }

    }
}
