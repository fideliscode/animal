// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\Controller.java.vsl) DO NOT EDIT!
package org.fidelis.animal.web.animal.add;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import org.fidelis.animal.ControllerBase;
import org.fidelis.animal.JsfUtils;
import org.fidelis.animal.web.animal.AnimalController;

/**
 * TODO: Model Documentation for org.fidelis.animal.web.animal.add.AddAnimalController
 */
public abstract class AddAnimalController
    extends ControllerBase
    implements Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns an instance from the JSF context
     *
     */
    public static AddAnimalController instance()
    {
        return (AddAnimalController)JsfUtils.resolveVariable("addAnimalController");
    }
    
    /**
     * Populate action form and page variables
     *
     * @param currentView the current view
     * @param forward the forward view
     * @param sourceForm the source form
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws NoSuchMethodException
     */
    private void populateActionFormsAndPageVariables(final String currentView, String forward, final Object sourceForm) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException
    {
        if(forward == null)
        {
            forward=currentView;
        }
        
        final Map<String,Object> pageVariables=this.getPageVariables(forward);
        if("/org/fidelis/animal/web/animal/add/add-animal.jsf".equals(forward))
        {
            AddAnimalViewPopulator.populateForm(sourceForm,this.getAddAnimalSaveForm());
            AddAnimalViewPopulator.populateAddAnimalPageVariables(sourceForm,pageVariables);
        }
        ControllerBase.getUseCaseScope().put(CURRENT_PAGE_VARIABLES_KEY, pageVariables);
    }
    
    /**
     * TODO: Model Documentation for
     * org.fidelis.animal.web.animal.add.AddAnimalController.loadOptions
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void loadOptions(LoadOptionsForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.animal.add.AddAnimalController.add
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void add(AddForm form)
        throws Throwable;


    /**
     * Retrieves the {@link AddAnimalSaveFormImpl} form instance 
     *
     * @return AddAnimalSaveFormImpl
     */
    protected AddAnimalSaveFormImpl getAddAnimalSaveForm()
    {
        return (AddAnimalSaveFormImpl)JsfUtils.resolveVariable("addAnimalAddAnimalSaveForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.animal.add.Save
     * This method is called when 'Save' is triggered in the view 'Add Animal'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _addAnimal_save(AddAnimalSaveFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves addAnimalSave()
     *    
     * @return addAnimalSave
     * @throws Throwable
     */
    public String addAnimalSave()
        throws Throwable
    {
        this.setLastPostedFormClientId("addAnimalAddAnimalSaveForm");
        
        String forward=null;
        final AddAnimalSaveFormImpl form =
            this.getAddAnimalSaveForm();
            
        //trigger method execution
        _addAnimal_save(form);

        forward = _add(form);
        populateActionFormsAndPageVariables("/org/fidelis/animal/web/animal/add/add-animal.jsf",forward,form);
        if(forward != null)
        {
            if("/org/fidelis/animal/web/animal/add/add-animal.jsf".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.animal.add.add
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _add(final AddAnimalSaveFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        add(form);
        forward = ((AnimalController)JsfUtils.resolveVariable("animalController")).startUseCase();
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.animal.add.Back
     * This method is called when 'Back' is triggered in the view 'Add Animal'.
     * It can be safely overridden in descendant classes.
     */
    protected void _addAnimal_back()
    {
        //this method can be overridden
    }

    /**
     * Retrieves addAnimalBack()
     *    
     * @return addAnimalBack
     * @throws Throwable
     */
    public String addAnimalBack()
        throws Throwable
    {
        this.setLastPostedFormClientId("addAnimalAddAnimalBackForm");
        
        String forward=null;
        forward=((AnimalController)JsfUtils.resolveVariable("animalController")).startUseCase();
        
        return forward;
    }

    /**
     * Retrieves the {@link AddAnimalFormImpl} form instance 
     *
     * @return AddAnimalFormImpl
     */
    protected AddAnimalFormImpl getAddAnimalForm()
    {
        return (AddAnimalFormImpl)JsfUtils.resolveVariable("addAnimalAddAnimalForm");
    }

    /**
     * This method is called when the use case 'Add Animal' starts.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _addAnimal_started(AddAnimalFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves the internal start use case
     *    
     * @return addAnimal
     * @throws Throwable
     */
    protected String internalStartUseCase(Map<String,Object> useCaseParameters)
        throws Throwable
    {
        this.setLastPostedFormClientId("addAnimalAddAnimalForm");
        
        String forward=null;
        final AddAnimalFormImpl form =
            this.getAddAnimalForm();
            
        //copy parameters form caller use case
        form.copyFrom(useCaseParameters);
        
        //trigger method execution
        _addAnimal_started(form);

        forward = _loadOptions(form);
        populateActionFormsAndPageVariables(null,forward,form);
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.animal.add.loadOptions
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _loadOptions(final AddAnimalFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        loadOptions(form);
        forward = "/org/fidelis/animal/web/animal/add/add-animal.jsf";
        return forward;
    }


}