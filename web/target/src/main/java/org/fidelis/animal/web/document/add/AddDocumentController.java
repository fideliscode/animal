// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\Controller.java.vsl) DO NOT EDIT!
package org.fidelis.animal.web.document.add;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import org.fidelis.animal.ControllerBase;
import org.fidelis.animal.JsfUtils;

/**
 * TODO: Model Documentation for org.fidelis.animal.web.document.add.AddDocumentController
 */
public abstract class AddDocumentController
    extends ControllerBase
    implements Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns an instance from the JSF context
     *
     */
    public static AddDocumentController instance()
    {
        return (AddDocumentController)JsfUtils.resolveVariable("addDocumentController");
    }
    
    /**
     * Populate action form and page variables
     *
     * @param currentView the current view
     * @param forward the forward view
     * @param sourceForm the source form
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws NoSuchMethodException
     */
    private void populateActionFormsAndPageVariables(final String currentView, String forward, final Object sourceForm) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException
    {
        if(forward == null)
        {
            forward=currentView;
        }
        
        final Map<String,Object> pageVariables=this.getPageVariables(forward);
        if("/org/fidelis/animal/web/document/add/add-document.jsf".equals(forward))
        {
            AddDocumentViewPopulator.populateForm(sourceForm,this.getAddDocumentUploadForm());
            AddDocumentViewPopulator.populateAddDocumentPageVariables(sourceForm,pageVariables);
        }
        ControllerBase.getUseCaseScope().put(CURRENT_PAGE_VARIABLES_KEY, pageVariables);
    }
    
    /**
     * TODO: Model Documentation for
     * org.fidelis.animal.web.document.add.AddDocumentController.loadOptions
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void loadOptions(LoadOptionsForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.document.add.AddDocumentController.add
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void add(AddForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for
     * org.fidelis.animal.web.document.add.AddDocumentController.checkRecordType
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract String checkRecordType(CheckRecordTypeForm form)
        throws Throwable;


    /**
     * Retrieves the {@link AddDocumentUploadFormImpl} form instance 
     *
     * @return AddDocumentUploadFormImpl
     */
    protected AddDocumentUploadFormImpl getAddDocumentUploadForm()
    {
        return (AddDocumentUploadFormImpl)JsfUtils.resolveVariable("addDocumentAddDocumentUploadForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.document.add.upload
     * This method is called when 'upload' is triggered in the view 'Add Document'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _addDocument_upload(AddDocumentUploadFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves addDocumentUpload()
     *    
     * @return addDocumentUpload
     * @throws Throwable
     */
    public String addDocumentUpload()
        throws Throwable
    {
        this.setLastPostedFormClientId("addDocumentAddDocumentUploadForm");
        
        String forward=null;
        final AddDocumentUploadFormImpl form =
            this.getAddDocumentUploadForm();
            
        //trigger method execution
        _addDocument_upload(form);

        forward = _add(form);
        populateActionFormsAndPageVariables("/org/fidelis/animal/web/document/add/add-document.jsf",forward,form);
        if(forward != null)
        {
            if("/org/fidelis/animal/web/document/add/add-document.jsf".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.document.add.add
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _add(final AddDocumentUploadFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        add(form);
        forward = __checkRecordType(form);
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.document.add.unknown
     *
     * @return a transition
     */
    protected String __checkRecordType(final AddDocumentUploadFormImpl form)
        throws Throwable
    {
        final String value = String.valueOf(checkRecordType(form));
        String forward = null;
        if (value.equals("animal"))
        {
            forward =  closeDialog();
        }
        if (value.equals("feed"))
        {
            forward =  closeDialog();
        }
        if (forward == null)
        {
            // throw exception in case we have an invalid return value from the controller
            throw new RuntimeException("Runtime model error: no valid path selected. Selected path="+value);
        }
        else
        {
            return forward;
        }
    }

    /**
     * Retrieves the {@link AddDocumentFormImpl} form instance 
     *
     * @return AddDocumentFormImpl
     */
    protected AddDocumentFormImpl getAddDocumentForm()
    {
        return (AddDocumentFormImpl)JsfUtils.resolveVariable("addDocumentAddDocumentForm");
    }

    /**
     * This method is called when the use case 'Add Document' starts.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _addDocument_started(AddDocumentFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves the internal start use case
     *    
     * @return addDocument
     * @throws Throwable
     */
    protected String internalStartUseCase(Map<String,Object> useCaseParameters)
        throws Throwable
    {
        this.setLastPostedFormClientId("addDocumentAddDocumentForm");
        
        String forward=null;
        final AddDocumentFormImpl form =
            this.getAddDocumentForm();
            
        //copy parameters form caller use case
        form.copyFrom(useCaseParameters);
        
        //trigger method execution
        _addDocument_started(form);

        forward = _loadOptions(form);
        populateActionFormsAndPageVariables(null,forward,form);
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.document.add.loadOptions
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _loadOptions(final AddDocumentFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        loadOptions(form);
        forward = "/org/fidelis/animal/web/document/add/add-document.jsf";
        return forward;
    }


}