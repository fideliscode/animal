// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\Controller.java.vsl) DO NOT EDIT!
package org.fidelis.animal.web.feed.add;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import org.fidelis.animal.ControllerBase;
import org.fidelis.animal.JsfUtils;
import org.fidelis.animal.web.feed.FeedController;

/**
 * TODO: Model Documentation for org.fidelis.animal.web.feed.add.AddFeedController
 */
public abstract class AddFeedController
    extends ControllerBase
    implements Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns an instance from the JSF context
     *
     */
    public static AddFeedController instance()
    {
        return (AddFeedController)JsfUtils.resolveVariable("addFeedController");
    }
    
    /**
     * Populate action form and page variables
     *
     * @param currentView the current view
     * @param forward the forward view
     * @param sourceForm the source form
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws NoSuchMethodException
     */
    private void populateActionFormsAndPageVariables(final String currentView, String forward, final Object sourceForm) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException
    {
        if(forward == null)
        {
            forward=currentView;
        }
        
        final Map<String,Object> pageVariables=this.getPageVariables(forward);
        if("/org/fidelis/animal/web/feed/add/add-feed.jsf".equals(forward))
        {
            AddFeedViewPopulator.populateForm(sourceForm,this.getAddFeedSaveForm());
            AddFeedViewPopulator.populateAddFeedPageVariables(sourceForm,pageVariables);
        }
        ControllerBase.getUseCaseScope().put(CURRENT_PAGE_VARIABLES_KEY, pageVariables);
    }
    
    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.add.AddFeedController.loadOptions
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void loadOptions(LoadOptionsForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.add.AddFeedController.add
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void add(AddForm form)
        throws Throwable;


    /**
     * Retrieves the {@link AddFeedSaveFormImpl} form instance 
     *
     * @return AddFeedSaveFormImpl
     */
    protected AddFeedSaveFormImpl getAddFeedSaveForm()
    {
        return (AddFeedSaveFormImpl)JsfUtils.resolveVariable("addFeedAddFeedSaveForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.add.Save
     * This method is called when 'Save' is triggered in the view 'Add Feed'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _addFeed_save(AddFeedSaveFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves addFeedSave()
     *    
     * @return addFeedSave
     * @throws Throwable
     */
    public String addFeedSave()
        throws Throwable
    {
        this.setLastPostedFormClientId("addFeedAddFeedSaveForm");
        
        String forward=null;
        final AddFeedSaveFormImpl form =
            this.getAddFeedSaveForm();
            
        //trigger method execution
        _addFeed_save(form);

        forward = _save(form);
        populateActionFormsAndPageVariables("/org/fidelis/animal/web/feed/add/add-feed.jsf",forward,form);
        if(forward != null)
        {
            if("/org/fidelis/animal/web/feed/add/add-feed.jsf".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.add.save
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _save(final AddFeedSaveFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        add(form);
        forward = ((FeedController)JsfUtils.resolveVariable("feedController")).startUseCase();
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.add.Back
     * This method is called when 'Back' is triggered in the view 'Add Feed'.
     * It can be safely overridden in descendant classes.
     */
    protected void _addFeed_back()
    {
        //this method can be overridden
    }

    /**
     * Retrieves addFeedBack()
     *    
     * @return addFeedBack
     * @throws Throwable
     */
    public String addFeedBack()
        throws Throwable
    {
        this.setLastPostedFormClientId("addFeedAddFeedBackForm");
        
        String forward=null;
        forward=((FeedController)JsfUtils.resolveVariable("feedController")).startUseCase();
        
        return forward;
    }

    /**
     * Retrieves the {@link AddFeedFormImpl} form instance 
     *
     * @return AddFeedFormImpl
     */
    protected AddFeedFormImpl getAddFeedForm()
    {
        return (AddFeedFormImpl)JsfUtils.resolveVariable("addFeedAddFeedForm");
    }

    /**
     * This method is called when the use case 'Add Feed' starts.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _addFeed_started(AddFeedFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves the internal start use case
     *    
     * @return addFeed
     * @throws Throwable
     */
    protected String internalStartUseCase(Map<String,Object> useCaseParameters)
        throws Throwable
    {
        this.setLastPostedFormClientId("addFeedAddFeedForm");
        
        String forward=null;
        final AddFeedFormImpl form =
            this.getAddFeedForm();
            
        //copy parameters form caller use case
        form.copyFrom(useCaseParameters);
        
        //trigger method execution
        _addFeed_started(form);

        forward = _loadOptions(form);
        populateActionFormsAndPageVariables(null,forward,form);
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.add.loadOptions
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _loadOptions(final AddFeedFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        loadOptions(form);
        forward = "/org/fidelis/animal/web/feed/add/add-feed.jsf";
        return forward;
    }


}