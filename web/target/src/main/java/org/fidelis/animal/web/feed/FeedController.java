// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\Controller.java.vsl) DO NOT EDIT!
package org.fidelis.animal.web.feed;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import org.fidelis.animal.ControllerBase;
import org.fidelis.animal.JsfUtils;
import org.fidelis.animal.web.document.add.AddDocumentController;
import org.fidelis.animal.web.feed.add.AddFeedController;

/**
 * TODO: Model Documentation for FeedController
 */
public abstract class FeedController
    extends ControllerBase
    implements Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns an instance from the JSF context
     *
     */
    public static FeedController instance()
    {
        return (FeedController)JsfUtils.resolveVariable("feedController");
    }
    
    /**
     * Populate action form and page variables
     *
     * @param currentView the current view
     * @param forward the forward view
     * @param sourceForm the source form
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     * @throws NoSuchMethodException
     */
    private void populateActionFormsAndPageVariables(final String currentView, String forward, final Object sourceForm) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException
    {
        if(forward == null)
        {
            forward=currentView;
        }
        
        final Map<String,Object> pageVariables=this.getPageVariables(forward);
        if("/org/fidelis/animal/web/feed/feeds.jsf".equals(forward))
        {
            ManageFeedsViewPopulator.populateForm(sourceForm,this.getFeedsSearchForm());
            ManageFeedsViewPopulator.populateForm(sourceForm,this.getFeedsDetailsForm());
            ManageFeedsViewPopulator.populateFeedsPageVariables(sourceForm,pageVariables);
        }
        else
        if("/org/fidelis/animal/web/feed/feed.jsf".equals(forward))
        {
            ManageFeedsViewPopulator.populateForm(sourceForm,this.getFeedSaveForm());
            ManageFeedsViewPopulator.populateForm(sourceForm,this.getFeedAttachForm());
            ManageFeedsViewPopulator.populateFeedPageVariables(sourceForm,pageVariables);
        }
        ControllerBase.getUseCaseScope().put(CURRENT_PAGE_VARIABLES_KEY, pageVariables);
    }
    
    /**
     * TODO: Model Documentation for FeedController.search
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void search(SearchForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for FeedController.load
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void load(LoadForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for FeedController.edit
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract void edit(EditForm form)
        throws Throwable;

    /**
     * TODO: Model Documentation for FeedController.checkId
     *
     * @param form the associated form
     * @throws Throwable
     */
    public abstract Boolean checkId(CheckIdForm form)
        throws Throwable;


    /**
     * Retrieves the {@link FeedsSearchFormImpl} form instance 
     *
     * @return FeedsSearchFormImpl
     */
    protected FeedsSearchFormImpl getFeedsSearchForm()
    {
        return (FeedsSearchFormImpl)JsfUtils.resolveVariable("manageFeedsFeedsSearchForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.Search
     * This method is called when 'Search' is triggered in the view 'Feeds'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _feeds_search(FeedsSearchFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves feedsSearch()
     *    
     * @return feedsSearch
     * @throws Throwable
     */
    public String feedsSearch()
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsFeedsSearchForm");
        
        String forward=null;
        final FeedsSearchFormImpl form =
            this.getFeedsSearchForm();
            
        //trigger method execution
        _feeds_search(form);

        forward = _search(form);
        populateActionFormsAndPageVariables("/org/fidelis/animal/web/feed/feeds.jsf",forward,form);
        if(forward != null)
        {
            if("/org/fidelis/animal/web/feed/feeds.jsf".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.search
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _search(final FeedsSearchFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        search(form);
        forward = "/org/fidelis/animal/web/feed/feeds.jsf";
        return forward;
    }

    /**
     * Retrieves the {@link FeedsDetailsFormImpl} form instance 
     *
     * @return FeedsDetailsFormImpl
     */
    protected FeedsDetailsFormImpl getFeedsDetailsForm()
    {
        return (FeedsDetailsFormImpl)JsfUtils.resolveVariable("manageFeedsFeedsDetailsForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.Details
     * This method is called when 'Details' is triggered in the view 'Feeds'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _feeds_details(FeedsDetailsFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves feedsDetails()
     *    
     * @return feedsDetails
     * @throws Throwable
     */
    public String feedsDetails()
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsFeedsDetailsForm");
        
        String forward=null;
        final FeedsDetailsFormImpl form =
            this.getFeedsDetailsForm();
            
        //trigger method execution
        _feeds_details(form);

        forward = _load(form);
        populateActionFormsAndPageVariables("/org/fidelis/animal/web/feed/feeds.jsf",forward,form);
        if(forward != null)
        {
            if("/org/fidelis/animal/web/feed/feeds.jsf".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.load
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _load(final FeedsDetailsFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        load(form);
        forward = "/org/fidelis/animal/web/feed/feed.jsf";
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.Add Feed
     * This method is called when 'Add Feed' is triggered in the view 'Feeds'.
     * It can be safely overridden in descendant classes.
     */
    protected void _feeds_addFeed()
    {
        //this method can be overridden
    }

    /**
     * Retrieves feedsAddFeed()
     *    
     * @return feedsAddFeed
     * @throws Throwable
     */
    public String feedsAddFeed()
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsFeedsAddFeedForm");
        
        String forward=null;
        forward=((AddFeedController)JsfUtils.resolveVariable("addFeedController")).startUseCase();
        
        return forward;
    }

    /**
     * Retrieves the {@link FeedSaveFormImpl} form instance 
     *
     * @return FeedSaveFormImpl
     */
    protected FeedSaveFormImpl getFeedSaveForm()
    {
        return (FeedSaveFormImpl)JsfUtils.resolveVariable("manageFeedsFeedSaveForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.Save
     * This method is called when 'Save' is triggered in the view 'Feed'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _feed_save(FeedSaveFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves feedSave()
     *    
     * @return feedSave
     * @throws Throwable
     */
    public String feedSave()
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsFeedSaveForm");
        
        String forward=null;
        final FeedSaveFormImpl form =
            this.getFeedSaveForm();
            
        //trigger method execution
        _feed_save(form);

        forward = _edit(form);
        populateActionFormsAndPageVariables("/org/fidelis/animal/web/feed/feed.jsf",forward,form);
        if(forward != null)
        {
            if("/org/fidelis/animal/web/feed/feed.jsf".equals(forward))
            {
                forward = null; //the destination form is the same, stay on the current view
            }
        }
        
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.edit
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _edit(final FeedSaveFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        edit(form);
        forward = _load(form);
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.load
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _load(final FeedSaveFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        load(form);
        forward = "/org/fidelis/animal/web/feed/feed.jsf";
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.List
     * This method is called when 'List' is triggered in the view 'Feed'.
     * It can be safely overridden in descendant classes.
     */
    protected void _feed_list()
    {
        //this method can be overridden
    }

    /**
     * Retrieves feedList()
     *    
     * @return feedList
     * @throws Throwable
     */
    public String feedList()
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsFeedListForm");
        
        String forward=null;
        forward=((FeedController)JsfUtils.resolveVariable("feedController")).startUseCase();
        
        return forward;
    }

    /**
     * Retrieves the {@link FeedAttachFormImpl} form instance 
     *
     * @return FeedAttachFormImpl
     */
    protected FeedAttachFormImpl getFeedAttachForm()
    {
        return (FeedAttachFormImpl)JsfUtils.resolveVariable("manageFeedsFeedAttachForm");
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.Attach
     * This method is called when 'Attach' is triggered in the view 'Feed'.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _feed_attach(FeedAttachFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves feedAttach()
     *    
     * @return feedAttach
     * @throws Throwable
     */
    public String feedAttach()
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsFeedAttachForm");
        
        String forward=null;
        this.getFeedAttachForm().copyTo(getUseCaseParameters());
    
        forward=((AddDocumentController)JsfUtils.resolveVariable("addDocumentController")).startUseCase();
        
        return forward;
    }

    /**
     * Retrieves the {@link ManageFeedsFormImpl} form instance 
     *
     * @return ManageFeedsFormImpl
     */
    protected ManageFeedsFormImpl getManageFeedsForm()
    {
        return (ManageFeedsFormImpl)JsfUtils.resolveVariable("manageFeedsManageFeedsForm");
    }

    /**
     * This method is called when the use case 'Manage Feeds' starts.
     * It can be safely overridden in descendant classes.
     *
     * @param form the associated form
     */
    protected void _manageFeeds_started(ManageFeedsFormImpl form)
    {
        //this method can be overridden
    }

    /**
     * Retrieves the internal start use case
     *    
     * @return manageFeeds
     * @throws Throwable
     */
    protected String internalStartUseCase(Map<String,Object> useCaseParameters)
        throws Throwable
    {
        this.setLastPostedFormClientId("manageFeedsManageFeedsForm");
        
        String forward=null;
        final ManageFeedsFormImpl form =
            this.getManageFeedsForm();
            
        //copy parameters form caller use case
        form.copyFrom(useCaseParameters);
        
        //trigger method execution
        _manageFeeds_started(form);

        forward = __checkId(form);
        populateActionFormsAndPageVariables(null,forward,form);
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.search
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _search(final ManageFeedsFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        search(form);
        forward = "/org/fidelis/animal/web/feed/feeds.jsf";
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.load
     *
     * @param form the associated form
     * @return the forward view
     * @throws Throwable
     */
    protected String _load(final ManageFeedsFormImpl form)
        throws Throwable
    {
        String forward = null;
    
        load(form);
        forward = "/org/fidelis/animal/web/feed/feed.jsf";
        return forward;
    }

    /**
     * TODO: Model Documentation for org.fidelis.animal.web.feed.unknown
     *
     * @return a transition
     */
    protected String __checkId(final ManageFeedsFormImpl form)
        throws Throwable
    {
        final String value = String.valueOf(checkId(form));
        String forward = null;
        if (value.equals("false"))
        {
            forward = _search(form);
        }
        if (value.equals("true"))
        {
            forward = _load(form);
        }
        if (forward == null)
        {
            // throw exception in case we have an invalid return value from the controller
            throw new RuntimeException("Runtime model error: no valid path selected. Selected path="+value);
        }
        else
        {
            return forward;
        }
    }


}