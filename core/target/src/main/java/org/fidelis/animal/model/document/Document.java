// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 04/03/2022 18:05:32+0300.
//
package org.fidelis.animal.model.document;

import java.io.Serializable;
import java.util.Date;
import org.fidelis.animal.model.setting.RecordType;

/**
 * TODO: Model Documentation for Document
 */
// HibernateEntity.vsl annotations merge-point
public class Document
    implements Serializable, Comparable<Document>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 2179193948410547688L;

    // Generate 9 attributes
    private DocumentType type;

    /**
     * TODO: Model Documentation for Document.type
     * @return this.type DocumentType
     */
    public DocumentType getType()
    {
        return this.type;
    }

    /**
     * TODO: Model Documentation for Document.type
     * @param typeIn DocumentType
     */
    public void setType(DocumentType typeIn)
    {
        this.type = typeIn;
    }

    private Date dated;

    /**
     * TODO: Model Documentation for Document.dated
     * @return this.dated Date
     */
    public Date getDated()
    {
        return this.dated;
    }

    /**
     * TODO: Model Documentation for Document.dated
     * @param datedIn Date
     */
    public void setDated(Date datedIn)
    {
        this.dated = datedIn;
    }

    private String name;

    /**
     * TODO: Model Documentation for Document.name
     * @return this.name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for Document.name
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private String extension;

    /**
     * TODO: Model Documentation for Document.extension
     * @return this.extension String
     */
    public String getExtension()
    {
        return this.extension;
    }

    /**
     * TODO: Model Documentation for Document.extension
     * @param extensionIn String
     */
    public void setExtension(String extensionIn)
    {
        this.extension = extensionIn;
    }

    private String description;

    /**
     * TODO: Model Documentation for Document.description
     * @return this.description String
     */
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for Document.description
     * @param descriptionIn String
     */
    public void setDescription(String descriptionIn)
    {
        this.description = descriptionIn;
    }

    private Long reference;

    /**
     * TODO: Model Documentation for Document.reference
     * @return this.reference Long
     */
    public Long getReference()
    {
        return this.reference;
    }

    /**
     * TODO: Model Documentation for Document.reference
     * @param referenceIn Long
     */
    public void setReference(Long referenceIn)
    {
        this.reference = referenceIn;
    }

    private String guid;

    /**
     * TODO: Model Documentation for Document.guid
     * @return this.guid String
     */
    public String getGuid()
    {
        return this.guid;
    }

    /**
     * TODO: Model Documentation for Document.guid
     * @param guidIn String
     */
    public void setGuid(String guidIn)
    {
        this.guid = guidIn;
    }

    private RecordType recordType;

    /**
     * TODO: Model Documentation for Document.recordType
     * @return this.recordType RecordType
     */
    public RecordType getRecordType()
    {
        return this.recordType;
    }

    /**
     * TODO: Model Documentation for Document.recordType
     * @param recordTypeIn RecordType
     */
    public void setRecordType(RecordType recordTypeIn)
    {
        this.recordType = recordTypeIn;
    }

    private Long id;

    /**
     * TODO: Model Documentation for Document.id
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Document.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    /**
     * Returns <code>true</code> if the argument is an Document instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Document))
        {
            return false;
        }
        final Document that = (Document)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Document}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Document}.
         * @return new DocumentImpl()
         */
        public static Document newInstance()
        {
            return new DocumentImpl();
        }

        /**
         * Constructs a new instance of {@link Document}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param type DocumentType
         * @param recordType RecordType
         * @return newInstance
         */
        public static Document newInstance(DocumentType type, RecordType recordType)
        {
            final Document entity = new DocumentImpl();
            entity.setType(type);
            entity.setRecordType(recordType);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Document}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param type DocumentType
         * @param dated Date
         * @param name String
         * @param extension String
         * @param description String
         * @param reference Long
         * @param guid String
         * @param recordType RecordType
         * @return newInstance Document
         */
        public static Document newInstance(DocumentType type, Date dated, String name, String extension, String description, Long reference, String guid, RecordType recordType)
        {
            final Document entity = new DocumentImpl();
            entity.setType(type);
            entity.setDated(dated);
            entity.setName(name);
            entity.setExtension(extension);
            entity.setDescription(description);
            entity.setReference(reference);
            entity.setGuid(guid);
            entity.setRecordType(recordType);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Document other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getType() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getType().compareTo(other.getType()));
            }
            if (this.getDated() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDated().compareTo(other.getDated()));
            }
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(other.getName()));
            }
            if (this.getExtension() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getExtension().compareTo(other.getExtension()));
            }
            if (this.getDescription() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDescription().compareTo(other.getDescription()));
            }
            if (this.getReference() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getReference().compareTo(other.getReference()));
            }
            if (this.getGuid() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getGuid().compareTo(other.getGuid()));
            }
            if (this.getRecordType() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getRecordType().compareTo(other.getRecordType()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Document(");
        sb.append(" type=").append(getType());
        sb.append(" dated=").append(getDated());
        sb.append(" name=").append(getName());
        sb.append(" extension=").append(getExtension());
        sb.append(" description=").append(getDescription());
        sb.append(" reference=").append(getReference());
        sb.append(" guid=").append(getGuid());
        sb.append(" recordType=").append(getRecordType());
        sb.append(" id=").append(getId());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}