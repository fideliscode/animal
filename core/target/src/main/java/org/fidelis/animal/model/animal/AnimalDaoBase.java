// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4=true hibernateVersion=4.3.6.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on 04/03/2022 18:05:30+0300. Do not modify by hand!.
//
package org.fidelis.animal.model.animal;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Resource;
import org.andromda.spring.PaginationResult;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.fidelis.animal.CriteriaSearch;
import org.fidelis.animal.CriteriaSearchParameter;
import org.fidelis.animal.PrincipalStore;
import org.fidelis.animal.PropertySearch;
import org.fidelis.animal.Search;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.MatchMode;
import org.springframework.stereotype.Repository;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>Animal</code>.
 * </p>
 *
 * @see Animal
 */
@Repository
public abstract class AnimalDaoBase
    implements AnimalDao
{
    /**
     * For backwards compatibility with HibernateDao method
     * @deprecated Use LogFactory.getLog on each subclass, for the correct class name
     * Apache commons logging logger used by all subclasses
     */
    @Deprecated
    protected Log logger = LogFactory.getLog(AnimalDaoBase.class);

    @Resource
    private SessionFactory sessionFactory;
    /**
     * @param sessionFactoryIn
     */
    public void setSessionFactory(SessionFactory sessionFactoryIn) {
        this.sessionFactory = sessionFactoryIn;
    }
    /**
     * @return SessionFactory
     */
    protected SessionFactory getSessionFactory() {
        return this.sessionFactory;
    }
    /**
     * @return currentSession
     */
    protected Session getSession() {
        return this.sessionFactory.getCurrentSession();
    }
    /**
     * For backwards compatibility with HibernateDao method
     * @deprecated Use this.sessionFactory.getCurrentSession() instead
     * @param ignore boolean - always create new session if needed
     * @return currentSession
     */
    @Deprecated
    protected Session getSession(boolean ignore) {
        return this.getSession();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Animal.get - 'id' can not be null");
        }
        final Object entity = this.sessionFactory.getCurrentSession().get(AnimalImpl.class, id);
        return transformEntity(transform, (Animal)entity);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public Animal get(Long id)
    {
        return (Animal)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Animal.load - 'id' can not be null");
        }
        final Object entity = this.sessionFactory.getCurrentSession().get(AnimalImpl.class, id);
        return transformEntity(transform, (Animal)entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Animal load(Long id)
    {
        return (Animal)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Animal> loadAll()
    {
        return (Collection<Animal>) this.loadAll(AnimalDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(AnimalDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        final Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(AnimalImpl.class);
        if (pageNumber > 0 && pageSize > 0)
        {
            criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
            criteria.setMaxResults(pageSize);
        }
        final Collection<?> results = criteria.list();
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param animal Animal
     */
    protected void _prePersist(final Animal animal)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param animal Animal
     */
    protected void _postPersist(final Animal animal)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param animal Animal
     */
    protected void _preUpdate(final Animal animal)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param animal Animal
     */
    protected void _postUpdate(final Animal animal)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param animal Animal
     */
    protected void _preRemove(final Animal animal)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param animal Animal
     */
    protected void _postRemove(final Animal animal)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Animal create(Animal animal)
    {
        return (Animal)this.create(AnimalDao.TRANSFORM_NONE, animal);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, final Animal animal)
    {
        if (animal == null)
        {
            throw new IllegalArgumentException(
                "Animal.create - 'animal' can not be null");
        }

        //prePersist event
        _prePersist(animal);

        this.sessionFactory.getCurrentSession().save(animal);

        //postPersist event
        _postPersist(animal);

        return this.transformEntity(transform, animal);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Animal> create(final Collection<Animal> entities)
    {
        return (Collection<Animal>) create(AnimalDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<Animal> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Animal.create - 'entities' can not be null");
        }
        Collection<Object> transformed = new ArrayList<Object>();
        for (Animal entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Animal create(
        AnimalType type,
        Date dateOfBirth,
        AnimalBreed breed)
    {
        return (Animal)this.create(AnimalDao.TRANSFORM_NONE, type, dateOfBirth, breed);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        AnimalType type,
        Date dateOfBirth,
        AnimalBreed breed)
    {
        Animal entity = new AnimalImpl();
        entity.setType(type);
        entity.setDateOfBirth(dateOfBirth);
        entity.setBreed(breed);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(Animal animal)
    {
        if (animal == null)
        {
            throw new IllegalArgumentException(
                "Animal.update - 'animal' can not be null");
        }

        //preUpdate event
        _preUpdate(animal);

        this.sessionFactory.getCurrentSession().update(animal);

        //postUpdate event
        _postUpdate(animal);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<Animal> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Animal.update - 'entities' can not be null");
        }
        for (Animal entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Animal animal)
    {
        if (animal == null)
        {
            throw new IllegalArgumentException(
                "Animal.remove - 'animal' can not be null");
        }
        //preRemove event
        _preRemove(animal);

        this.sessionFactory.getCurrentSession().delete(animal);

        //postRemove event
        _postRemove(animal);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Animal.remove - 'id' can not be null");
        }
        Animal entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<Animal> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Animal.remove - 'entities' can not be null");
        }
        for (Animal entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.sessionFactory.getCurrentSession().delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Animal> findByCreteria(AnimalCriteria criteria)
    {
        return (Collection<Animal>)this.findByCreteria(AnimalDao.TRANSFORM_NONE, criteria);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByCreteria(final int transform, final AnimalCriteria criteria)
    {
        return this.findByCreteria(transform, -1, -1, criteria);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByCreteria(final int transform, final int pageNumber, final int pageSize, final AnimalCriteria criteria)
    {
            CriteriaSearch criteriaSearch = new CriteriaSearch(this.getSession(false), AnimalImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criteria.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criteria.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criteria.getMaximumResultSize());
            if (pageNumber > 0 && pageSize > 0)
            {
                criteriaSearch.getConfiguration().setFirstResult(new Integer(calculateFirstResult(pageNumber, pageSize)));
                criteriaSearch.getConfiguration().setMaximumResultSize(new Integer(pageSize));
            }
            CriteriaSearchParameter parameter1 =
                new CriteriaSearchParameter(
                    criteria.getType(),
                    "type", CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR, MatchMode.ANYWHERE);
            criteriaSearch.addParameter(parameter1);
            CriteriaSearchParameter parameter2 =
                new CriteriaSearchParameter(
                    criteria.getStartDate(),
                    "dateOfBirth", CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
            CriteriaSearchParameter parameter3 =
                new CriteriaSearchParameter(
                    criteria.getEndDate(),
                    "dateOfBirth", CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            CriteriaSearchParameter parameter4 =
                new CriteriaSearchParameter(
                    criteria.getBreed(),
                    "breed", CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR, MatchMode.ANYWHERE);
            criteriaSearch.addParameter(parameter4);
            List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>AnimalDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Animal} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link AnimalVO} - {@link #TRANSFORM_ANIMALVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link AnimalDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see AnimalDao#transformEntity(int, Animal)
     */
    @Override
    public Object transformEntity(final int transform, final Animal entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_ANIMALVO :
                    target = toAnimalVO(entity);
                    break;
                case AnimalDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_ANIMALVO :
                CollectionUtils.transform(entities, this.ANIMALVO_TRANSFORMER);
                break;
            case AnimalDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see AnimalDao#toEntities(Collection)
     */
    @Override
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link Animal}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof Animal)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return Animal
     */
    protected Animal toEntity(Object[] row)
    {
        Animal target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof Animal)
                {
                    target = (Animal)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public final Collection<AnimalVO> toAnimalVOCollection(Collection<Animal> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        Collection result = new ArrayList(entities);
        CollectionUtils.transform(result, this.ANIMALVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public final AnimalVO[] toAnimalVOArray(Collection<?> entities)
    {
        AnimalVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final Collection collection = new ArrayList(entities);
            this.toAnimalVOCollection(collection);
            result = (AnimalVO[]) collection.toArray(new AnimalVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link AnimalDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toAnimalVO(this.toEntity(row))
     * @see AnimalDao#toAnimalVO(Animal)
     */
    protected AnimalVO toAnimalVO(Object[] row)
    {
        return this.toAnimalVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link AnimalVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ANIMALVO_TRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Animal)
                {
                    final Animal entity = (Animal)input;
                    result = toAnimalVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toAnimalVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public final void animalVOToEntityCollection(Collection<?> instances)
    {
        if (instances != null)
        {
            for (final Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof AnimalVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.AnimalVOToEntityTransformer);
        }
    }

    private final Transformer AnimalVOToEntityTransformer =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return animalVOToEntity((AnimalVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toAnimalVO(
        Animal source,
        AnimalVO target)
    {
        target.setId(source.getId());
        // No conversion for target.type (can't convert source.getType():AnimalType to java.lang.String)
        target.setDateOfBirth(source.getDateOfBirth());
        // No conversion for target.breed (can't convert source.getBreed():AnimalBreed to java.lang.String)
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnimalVO toAnimalVO(final Animal entity)
    {
        AnimalVO target = null;
        if (entity != null)
        {
            target =  new AnimalVO();
            this.toAnimalVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void animalVOToEntity(
        AnimalVO source,
        Animal target,
        boolean copyIfNull)
    {
        // No conversion for target.type (can't convert source.getType():java.lang.String to AnimalType)
        if (copyIfNull || source.getDateOfBirth() != null)
        {
            target.setDateOfBirth(source.getDateOfBirth());
        }
        // No conversion for target.breed (can't convert source.getBreed():java.lang.String to AnimalBreed)
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search)
    {
        search.setPageNumber(pageNumber);
        search.setPageSize(pageSize);
        final PropertySearch propertySearch = new PropertySearch(
            this.sessionFactory.getCurrentSession(), AnimalImpl.class, search);
        final List<?> results = propertySearch.executeAsList();
        this.transformEntities(transform, results);
        return new PaginationResult(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search)
    {
        return this.search(AnimalDao.TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> search(final int transform, final Search search)
    {
        final PropertySearch propertySearch = new PropertySearch(
            this.sessionFactory.getCurrentSession(), AnimalImpl.class, search);
        final Collection<?> results = propertySearch.executeAsList();
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<Animal> search(final Search search)
    {
        return (Collection<Animal>) this.search(AnimalDao.TRANSFORM_NONE, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link PaginationResult} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return PaginationResult
     */
    @SuppressWarnings({ "unchecked" })
    protected PaginationResult getPaginationResult(
        final Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        final ScrollableResults scrollableResults = queryObject.scroll();
        scrollableResults.last();
        int totalCount = scrollableResults.getRowNumber();
        totalCount = totalCount >= 0 ? totalCount + 1 : 0;
        if (pageNumber > 0 && pageSize > 0)
        {
            queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
            queryObject.setMaxResults(pageSize);
        }
        // Unchecked transformation because Set object is reused, cannot be strongly typed.
        @SuppressWarnings("rawtypes")
        Collection results = new ArrayList(queryObject.list());
        transformEntities(transform, results);
        return new PaginationResult(results.toArray(new Object[results.size()]), totalCount);
    }


    /**
     * Create or Update the <code>animal</code> instance in the persistent store.
     * @param animal
     */
    @Override
    public Animal createOrUpdate(Animal animal)
    {
        if(animal.getId() == null)
        {
            return (Animal)this.create(TRANSFORM_NONE,animal);
        }
        this.update(animal);
        return animal;
    }

    // spring-hibernate-dao-base merge-point
}