// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringDao.vsl in andromda-spring-cartridge on 04/03/2022 18:05:29+0300. Do not modify by hand!.
//
package org.fidelis.animal.model.document;

import java.util.Collection;
import java.util.Date;
import org.andromda.spring.PaginationResult;
import org.fidelis.animal.Search;
import org.fidelis.animal.model.setting.RecordType;

/**
 * TODO: Model Documentation for Document
 * @see Document
 */
public interface DocumentDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link Document}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link DocumentVO}.
     */
    public static final int TRANSFORM_DOCUMENTVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toDocumentVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    public void toDocumentVO(
        Document source,
        DocumentVO target);

    /**
     * Converts this DAO's entity to an object of type {@link DocumentVO}.
     * @param entity
     * @return DocumentVO
     */
    public DocumentVO toDocumentVO(Document entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link DocumentVO}.
     * @param entities
     * @return Collection<DocumentVO>
     */
    public Collection<DocumentVO> toDocumentVOCollection(Collection<Document> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link DocumentVO}.
     * @param entities
     * @return DocumentVO[]
     */
    public DocumentVO[] toDocumentVOArray(Collection<?> entities);

    /**
     * Copies the fields of {@link DocumentVO} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void documentVOToEntity(
        DocumentVO source,
        Document target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link DocumentVO} to this DAO's entity.
     * @param documentVO
     * @return Document
     */
    public Document documentVOToEntity(DocumentVO documentVO);

    /**
     * Converts a Collection of instances of type {@link DocumentVO} to this
     * DAO's entity.
     * @param instances
     */
    public void documentVOToEntityCollection(Collection<?> instances);

    /**
     * Gets an instance of Document from the persistent store.
     * @param id
     * @return Document
     */
    public Document get(Long id);

    /**
     * <p>
     * Does the same thing as {@link #get(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, Long id);

    /**
     * Loads an instance of Document from the persistent store.
     * @param id
     * @return Document
     */
    public Document load(Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, Long id);

    /**
     * Loads all entities of type {@link Document}.
     *
     * @return the loaded entities.
     */
    public Collection<Document> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of Document and adds it to the persistent store.
     * @param document
     * @return Document
     */
    public Document create(Document document);

    /**
     * <p>
     * Does the same thing as {@link #create(Document)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param document
     * @return Object
     */
    public Object create(int transform, Document document);

    /**
     * Creates a new instance of Document and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of Document
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<Document> create(Collection<Document> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(Document)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<Document> entities);

    /**
     * <p>
     * Creates a new <code>Document</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param type TODO: Model Documentation for Document.type
     * @param dated TODO: Model Documentation for Document.dated
     * @param name TODO: Model Documentation for Document.name
     * @param extension TODO: Model Documentation for Document.extension
     * @param description TODO: Model Documentation for Document.description
     * @param reference TODO: Model Documentation for Document.reference
     * @param guid TODO: Model Documentation for Document.guid
     * @param recordType TODO: Model Documentation for Document.recordType
     * @return Document
     */
    public Document create(
        DocumentType type,
        Date dated,
        String name,
        String extension,
        String description,
        Long reference,
        String guid,
        RecordType recordType);

    /**
     * <p>
     * Does the same thing as {@link #create(DocumentType, Date, String, String, String, Long, String, RecordType)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param type TODO: Model Documentation for Document.type
     * @param dated TODO: Model Documentation for Document.dated
     * @param name TODO: Model Documentation for Document.name
     * @param extension TODO: Model Documentation for Document.extension
     * @param description TODO: Model Documentation for Document.description
     * @param reference TODO: Model Documentation for Document.reference
     * @param guid TODO: Model Documentation for Document.guid
     * @param recordType TODO: Model Documentation for Document.recordType
     * @return Document
     */
    public Object create(
        int transform,
        DocumentType type,
        Date dated,
        String name,
        String extension,
        String description,
        Long reference,
        String guid,
        RecordType recordType);


    /**
     * Updates the <code>document</code> instance in the persistent store.
     * @param document
     */
    public void update(Document document);

    /**
     * Create or Update the <code>document</code> instance in the persistent store.
     * @param document
     * @return Document
     */
    public Document createOrUpdate(Document document);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<Document> entities);

    /**
     * Removes the instance of Document from the persistent store.
     * @param document
     */
    public void remove(Document document);

    /**
     * Removes the instance of Document having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<Document> entities);

    /**
     * TODO: Model Documentation for Document.findByCreteria
     * @param criteria TODO: Model Documentation for Document.findByCreteria(criteria)
     * @return Collection<Document>
     */
    public Collection<Document> findByCreteria(DocumentCriteria criteria);

    /**
     * <p>
     * Does the same thing as {@link #findByCreteria(DocumentCriteria)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param criteria TODO: Model Documentation for Document.findByCreteria(criteria)
     * @return Collection<?>
     */
    public Collection<?> findByCreteria(final int transform, final DocumentCriteria criteria);

    /**
     * <p>
     * Does the same thing as {@link #findByCreteria(int, String, DocumentCriteria)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param criteria TODO: Model Documentation for Document.findByCreteria(criteria)
     * @return Collection<?>
     */
    public Collection<?> findByCreteria(final int transform, final int pageNumber, final int pageSize, final DocumentCriteria criteria);

    /**
     * TODO: Model Documentation for Document.findByType
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<Document>
     */
    public Collection<Document> findByType(String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByType(String)}.
     * </p>
     * @param queryString
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<Document>
     */
    public Collection<Document> findByType(String queryString, String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<Document>
     */
    public Collection<Document> findByType(int pageNumber, int pageSize, String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<Document>
     */
    public Collection<Document> findByType(String queryString, int pageNumber, int pageSize, String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<?>
     * </p>
     */
    public Collection<?> findByType(int transform, String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(int, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<?>
     */
    public Collection<?> findByType(int transform, int pageNumber, int pageSize, String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(int, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByType(int, String type)}.
     * </p>
     * @param transform
     * @param queryString
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<?>
     */
    public Collection<?> findByType(int transform, String queryString, String type);

    /**
     * <p>
     * Does the same thing as {@link #findByType(int, String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for Document.findByType(type)
     * @return Collection<?>
     */
    public Collection<?> findByType(int transform, String queryString, int pageNumber, int pageSize, String type);

    /**
     * TODO: Model Documentation for
     * Document.findByTypeAndReference
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReference(String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(String, Long)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByTypeAndReference(String, Long)}.
     * </p>
     * @param queryString
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReference(String queryString, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReference(int pageNumber, int pageSize, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(String, String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReference(String queryString, int pageNumber, int pageSize, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(String, Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<?>
     * </p>
     */
    public Collection<?> findByTypeAndReference(int transform, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(int, String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<?>
     */
    public Collection<?> findByTypeAndReference(int transform, int pageNumber, int pageSize, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(int, String, Long)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByTypeAndReference(int, String type, Long reference)}.
     * </p>
     * @param transform
     * @param queryString
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<?>
     */
    public Collection<?> findByTypeAndReference(int transform, String queryString, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReference(int, String, String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReference(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReference(reference)
     * @return Collection<?>
     */
    public Collection<?> findByTypeAndReference(int transform, String queryString, int pageNumber, int pageSize, String type, Long reference);

    /**
     * TODO: Model Documentation for
     * Document.findByRecordTypeReference
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordTypeReference(String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(String, Long)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRecordTypeReference(String, Long)}.
     * </p>
     * @param queryString
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordTypeReference(String queryString, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordTypeReference(int pageNumber, int pageSize, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(String, String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordTypeReference(String queryString, int pageNumber, int pageSize, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(String, Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<?>
     * </p>
     */
    public Collection<?> findByRecordTypeReference(int transform, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(int, String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<?>
     */
    public Collection<?> findByRecordTypeReference(int transform, int pageNumber, int pageSize, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(int, String, Long)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRecordTypeReference(int, String type, Long reference)}.
     * </p>
     * @param transform
     * @param queryString
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<?>
     */
    public Collection<?> findByRecordTypeReference(int transform, String queryString, String type, Long reference);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordTypeReference(int, String, String, Long)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByRecordTypeReference(type)
     * @param reference TODO: Model Documentation for
Document.findByRecordTypeReference(reference)
     * @return Collection<?>
     */
    public Collection<?> findByRecordTypeReference(int transform, String queryString, int pageNumber, int pageSize, String type, Long reference);

    /**
     * TODO: Model Documentation for
     * Document.findByTypeAndReferenceAndRecordType
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReferenceAndRecordType(String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(String, Long, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByTypeAndReferenceAndRecordType(String, Long, String)}.
     * </p>
     * @param queryString
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReferenceAndRecordType(String queryString, String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(String, Long, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReferenceAndRecordType(int pageNumber, int pageSize, String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(String, String, Long, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByTypeAndReferenceAndRecordType(String queryString, int pageNumber, int pageSize, String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(String, Long, String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<?>
     * </p>
     */
    public Collection<?> findByTypeAndReferenceAndRecordType(int transform, String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(int, String, Long, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<?>
     */
    public Collection<?> findByTypeAndReferenceAndRecordType(int transform, int pageNumber, int pageSize, String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(int, String, Long, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByTypeAndReferenceAndRecordType(int, String type, Long reference, String recordType)}.
     * </p>
     * @param transform
     * @param queryString
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<?>
     */
    public Collection<?> findByTypeAndReferenceAndRecordType(int transform, String queryString, String type, Long reference, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByTypeAndReferenceAndRecordType(int, String, String, Long, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param type TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(type)
     * @param reference TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(reference)
     * @param recordType TODO: Model Documentation for
Document.findByTypeAndReferenceAndRecordType(recordType)
     * @return Collection<?>
     */
    public Collection<?> findByTypeAndReferenceAndRecordType(int transform, String queryString, int pageNumber, int pageSize, String type, Long reference, String recordType);

    /**
     * TODO: Model Documentation for Document.findByRecordType
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordType(String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRecordType(String)}.
     * </p>
     * @param queryString
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordType(String queryString, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param pageNumber
     * @param pageSize
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordType(int pageNumber, int pageSize, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<Document>
     */
    public Collection<Document> findByRecordType(String queryString, int pageNumber, int pageSize, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * @param transform
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<?>
     * </p>
     */
    public Collection<?> findByRecordType(int transform, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(int, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<?>
     */
    public Collection<?> findByRecordType(int transform, int pageNumber, int pageSize, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(int, String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByRecordType(int, String recordType)}.
     * </p>
     * @param transform
     * @param queryString
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<?>
     */
    public Collection<?> findByRecordType(int transform, String queryString, String recordType);

    /**
     * <p>
     * Does the same thing as {@link #findByRecordType(int, String, String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     * @param transform
     * @param queryString
     * @param pageNumber
     * @param pageSize
     * @param recordType TODO: Model Documentation for
Document.findByRecordType(recordType)
     * @return Collection<?>
     */
    public Collection<?> findByRecordType(int transform, String queryString, int pageNumber, int pageSize, String recordType);


    /**
     * Does the same thing as {@link #search(int, Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public Collection<?> search(final int transform, final Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public Collection<Document> search(final Search search);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>org.fidelis.animal.model.document.DocumentDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Document} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link DocumentVO} - {@link #TRANSFORM_DOCUMENTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link org.fidelis.animal.model.document.DocumentDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final Document entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,Document)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>org.fidelis.animal.model.document.DocumentDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,Document)
     */
    public void transformEntities(final int transform, final Collection<?> entities);


    // spring-dao merge-point
}