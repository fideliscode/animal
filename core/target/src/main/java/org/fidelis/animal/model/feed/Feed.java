// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge on 04/03/2022 18:05:32+0300.
//
package org.fidelis.animal.model.feed;

import java.io.Serializable;
import java.util.Collection;
import java.util.HashSet;
import org.fidelis.animal.model.animal.Animal;

/**
 * TODO: Model Documentation for Feed
 */
// HibernateEntity.vsl annotations merge-point
public class Feed
    implements Serializable, Comparable<Feed>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 5041709616650436147L;

    // Generate 7 attributes
    private FeedType type;

    /**
     * TODO: Model Documentation for Feed.type
     * @return this.type FeedType
     */
    public FeedType getType()
    {
        return this.type;
    }

    /**
     * TODO: Model Documentation for Feed.type
     * @param typeIn FeedType
     */
    public void setType(FeedType typeIn)
    {
        this.type = typeIn;
    }

    private String name;

    /**
     * TODO: Model Documentation for Feed.name
     * @return this.name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * TODO: Model Documentation for Feed.name
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private String code;

    /**
     * TODO: Model Documentation for Feed.code
     * @return this.code String
     */
    public String getCode()
    {
        return this.code;
    }

    /**
     * TODO: Model Documentation for Feed.code
     * @param codeIn String
     */
    public void setCode(String codeIn)
    {
        this.code = codeIn;
    }

    private String intakeWeight;

    /**
     * TODO: Model Documentation for Feed.intakeWeight
     * @return this.intakeWeight String
     */
    public String getIntakeWeight()
    {
        return this.intakeWeight;
    }

    /**
     * TODO: Model Documentation for Feed.intakeWeight
     * @param intakeWeightIn String
     */
    public void setIntakeWeight(String intakeWeightIn)
    {
        this.intakeWeight = intakeWeightIn;
    }

    private String intakeRate;

    /**
     * TODO: Model Documentation for Feed.intakeRate
     * @return this.intakeRate String
     */
    public String getIntakeRate()
    {
        return this.intakeRate;
    }

    /**
     * TODO: Model Documentation for Feed.intakeRate
     * @param intakeRateIn String
     */
    public void setIntakeRate(String intakeRateIn)
    {
        this.intakeRate = intakeRateIn;
    }

    private String description;

    /**
     * TODO: Model Documentation for Feed.description
     * @return this.description String
     */
    public String getDescription()
    {
        return this.description;
    }

    /**
     * TODO: Model Documentation for Feed.description
     * @param descriptionIn String
     */
    public void setDescription(String descriptionIn)
    {
        this.description = descriptionIn;
    }

    private Long id;

    /**
     * TODO: Model Documentation for Feed.id
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * TODO: Model Documentation for Feed.id
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    private Collection<Animal> animals = new HashSet<Animal>();

    /**
     * TODO: Model Documentation for Animal
     * @return this.animals Collection<Animal>
     */
    public Collection<Animal> getAnimals()
    {
        return this.animals;
    }

    /**
     * TODO: Model Documentation for Animal
     * @param animalsIn Collection<Animal>
     */
    public void setAnimals(Collection<Animal> animalsIn)
    {
        this.animals = animalsIn;
    }

    /**
     * TODO: Model Documentation for Animal
     * @param elementToAdd Animal
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addAnimals(Animal elementToAdd)
    {
        return this.animals.add(elementToAdd);
    }

    /**
     * TODO: Model Documentation for Animal
     * @param elementToRemove Animal
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeAnimals(Animal elementToRemove)
    {
        return this.animals.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an Feed instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Feed))
        {
            return false;
        }
        final Feed that = (Feed)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Feed}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Feed}.
         * @return new FeedImpl()
         */
        public static Feed newInstance()
        {
            return new FeedImpl();
        }

        /**
         * Constructs a new instance of {@link Feed}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param type FeedType
         * @param name String
         * @return newInstance
         */
        public static Feed newInstance(FeedType type, String name)
        {
            final Feed entity = new FeedImpl();
            entity.setType(type);
            entity.setName(name);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Feed}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param type FeedType
         * @param name String
         * @param code String
         * @param intakeWeight String
         * @param intakeRate String
         * @param description String
         * @param animals Collection<Animal>
         * @return newInstance Feed
         */
        public static Feed newInstance(FeedType type, String name, String code, String intakeWeight, String intakeRate, String description, Collection<Animal> animals)
        {
            final Feed entity = new FeedImpl();
            entity.setType(type);
            entity.setName(name);
            entity.setCode(code);
            entity.setIntakeWeight(intakeWeight);
            entity.setIntakeRate(intakeRate);
            entity.setDescription(description);
            entity.setAnimals(animals);
            return entity;
        }
    }

    /**
     * @param other
     * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
     * @see Comparable#compareTo
     */
    @Override
    public int compareTo(Feed other)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(other.getId());
        }
        else
        {
            if (this.getType() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getType().compareTo(other.getType()));
            }
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(other.getName()));
            }
            if (this.getCode() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCode().compareTo(other.getCode()));
            }
            if (this.getIntakeWeight() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIntakeWeight().compareTo(other.getIntakeWeight()));
            }
            if (this.getIntakeRate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIntakeRate().compareTo(other.getIntakeRate()));
            }
            if (this.getDescription() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDescription().compareTo(other.getDescription()));
            }
        }
        return cmp;
    }

    /**
     * Returns a String representation of the object
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     * @see Object#toString
     */
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Feed(");
        sb.append(" type=").append(getType());
        sb.append(" name=").append(getName());
        sb.append(" code=").append(getCode());
        sb.append(" intakeWeight=").append(getIntakeWeight());
        sb.append(" intakeRate=").append(getIntakeRate());
        sb.append(" description=").append(getDescription());
        sb.append(" id=").append(getId());
        sb.append(")");
        return sb.toString();
    }
// HibernateEntity.vsl merge-point
}