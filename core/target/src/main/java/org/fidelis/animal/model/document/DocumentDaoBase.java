// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand! hibernate4=true hibernateVersion=4.3.6.Final
// Generated by hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge on 04/03/2022 18:05:30+0300. Do not modify by hand!.
//
package org.fidelis.animal.model.document;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Resource;
import org.andromda.spring.PaginationResult;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.fidelis.animal.CriteriaSearch;
import org.fidelis.animal.CriteriaSearchParameter;
import org.fidelis.animal.PrincipalStore;
import org.fidelis.animal.PropertySearch;
import org.fidelis.animal.Search;
import org.fidelis.animal.model.setting.RecordType;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.MatchMode;
import org.springframework.stereotype.Repository;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>Document</code>.
 * </p>
 *
 * @see Document
 */
@Repository
public abstract class DocumentDaoBase
    implements DocumentDao
{
    /**
     * For backwards compatibility with HibernateDao method
     * @deprecated Use LogFactory.getLog on each subclass, for the correct class name
     * Apache commons logging logger used by all subclasses
     */
    @Deprecated
    protected Log logger = LogFactory.getLog(DocumentDaoBase.class);

    @Resource
    private SessionFactory sessionFactory;
    /**
     * @param sessionFactoryIn
     */
    public void setSessionFactory(SessionFactory sessionFactoryIn) {
        this.sessionFactory = sessionFactoryIn;
    }
    /**
     * @return SessionFactory
     */
    protected SessionFactory getSessionFactory() {
        return this.sessionFactory;
    }
    /**
     * @return currentSession
     */
    protected Session getSession() {
        return this.sessionFactory.getCurrentSession();
    }
    /**
     * For backwards compatibility with HibernateDao method
     * @deprecated Use this.sessionFactory.getCurrentSession() instead
     * @param ignore boolean - always create new session if needed
     * @return currentSession
     */
    @Deprecated
    protected Session getSession(boolean ignore) {
        return this.getSession();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Document.get - 'id' can not be null");
        }
        final Object entity = this.sessionFactory.getCurrentSession().get(DocumentImpl.class, id);
        return transformEntity(transform, (Document)entity);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public Document get(Long id)
    {
        return (Document)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Document.load - 'id' can not be null");
        }
        final Object entity = this.sessionFactory.getCurrentSession().get(DocumentImpl.class, id);
        return transformEntity(transform, (Document)entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Document load(Long id)
    {
        return (Document)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> loadAll()
    {
        return (Collection<Document>) this.loadAll(DocumentDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        final Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(DocumentImpl.class);
        if (pageNumber > 0 && pageSize > 0)
        {
            criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
            criteria.setMaxResults(pageSize);
        }
        final Collection<?> results = criteria.list();
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * prePersist event - This method is called before creating the entity
     * @param document Document
     */
    protected void _prePersist(final Document document)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postPersist event - This method is called after creating the entity
     * @param document Document
     */
    protected void _postPersist(final Document document)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preUpdate event - This method is called before updating the entity
     * @param document Document
     */
    protected void _preUpdate(final Document document)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postUpdate event - This method is called after updating the entity
     * @param document Document
     */
    protected void _postUpdate(final Document document)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * preRemove event - This method is called before deleting the entity
     * @param document Document
     */
    protected void _preRemove(final Document document)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * postRemove event - This method is called after deleting the entity
     * @param document Document
     */
    protected void _postRemove(final Document document)
    {
        // Abstract method - your implementation goes in the descendant
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Document create(Document document)
    {
        return (Document)this.create(DocumentDao.TRANSFORM_NONE, document);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, final Document document)
    {
        if (document == null)
        {
            throw new IllegalArgumentException(
                "Document.create - 'document' can not be null");
        }

        //prePersist event
        _prePersist(document);

        this.sessionFactory.getCurrentSession().save(document);

        //postPersist event
        _postPersist(document);

        return this.transformEntity(transform, document);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> create(final Collection<Document> entities)
    {
        return (Collection<Document>) create(DocumentDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<Document> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Document.create - 'entities' can not be null");
        }
        Collection<Object> transformed = new ArrayList<Object>();
        for (Document entity : entities)
        {
            transformed.add(create(transform, entity));
        }
        return transformed;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Document create(
        DocumentType type,
        Date dated,
        String name,
        String extension,
        String description,
        Long reference,
        String guid,
        RecordType recordType)
    {
        return (Document)this.create(DocumentDao.TRANSFORM_NONE, type, dated, name, extension, description, reference, guid, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        DocumentType type,
        Date dated,
        String name,
        String extension,
        String description,
        Long reference,
        String guid,
        RecordType recordType)
    {
        Document entity = new DocumentImpl();
        entity.setType(type);
        entity.setDated(dated);
        entity.setName(name);
        entity.setExtension(extension);
        entity.setDescription(description);
        entity.setReference(reference);
        entity.setGuid(guid);
        entity.setRecordType(recordType);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(Document document)
    {
        if (document == null)
        {
            throw new IllegalArgumentException(
                "Document.update - 'document' can not be null");
        }

        //preUpdate event
        _preUpdate(document);

        this.sessionFactory.getCurrentSession().update(document);

        //postUpdate event
        _postUpdate(document);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<Document> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Document.update - 'entities' can not be null");
        }
        for (Document entity : entities)
        {
            update(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Document document)
    {
        if (document == null)
        {
            throw new IllegalArgumentException(
                "Document.remove - 'document' can not be null");
        }
        //preRemove event
        _preRemove(document);

        this.sessionFactory.getCurrentSession().delete(document);

        //postRemove event
        _postRemove(document);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Document.remove - 'id' can not be null");
        }
        Document entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<Document> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Document.remove - 'entities' can not be null");
        }
        for (Document entity : entities)
        {
            //preRemove event
            _preRemove(entity);

            this.sessionFactory.getCurrentSession().delete(entity);

            //postRemove event
            _postRemove(entity);
        }
    }
    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByCreteria(DocumentCriteria criteria)
    {
        return (Collection<Document>)this.findByCreteria(DocumentDao.TRANSFORM_NONE, criteria);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByCreteria(final int transform, final DocumentCriteria criteria)
    {
        return this.findByCreteria(transform, -1, -1, criteria);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByCreteria(final int transform, final int pageNumber, final int pageSize, final DocumentCriteria criteria)
    {
            CriteriaSearch criteriaSearch = new CriteriaSearch(this.getSession(false), DocumentImpl.class);
            criteriaSearch.getConfiguration().setFirstResult(criteria.getFirstResult());
            criteriaSearch.getConfiguration().setFetchSize(criteria.getFetchSize());
            criteriaSearch.getConfiguration().setMaximumResultSize(criteria.getMaximumResultSize());
            if (pageNumber > 0 && pageSize > 0)
            {
                criteriaSearch.getConfiguration().setFirstResult(new Integer(calculateFirstResult(pageNumber, pageSize)));
                criteriaSearch.getConfiguration().setMaximumResultSize(new Integer(pageSize));
            }
            CriteriaSearchParameter parameter1 =
                new CriteriaSearchParameter(
                    criteria.getType(),
                    "type", CriteriaSearchParameter.INSENSITIVE_LIKE_COMPARATOR, MatchMode.ANYWHERE);
            criteriaSearch.addParameter(parameter1);
            CriteriaSearchParameter parameter2 =
                new CriteriaSearchParameter(
                    criteria.getDated(),
                    "dateOfBirth", CriteriaSearchParameter.GREATER_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter2);
            CriteriaSearchParameter parameter3 =
                new CriteriaSearchParameter(
                    criteria.getName(),
                    "dateOfBirth", CriteriaSearchParameter.LESS_THAN_OR_EQUAL_COMPARATOR);
            criteriaSearch.addParameter(parameter3);
            List results = criteriaSearch.executeAsList();
            transformEntities(transform, results);
            return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByType(String type)
    {
        return (Collection<Document>)this.findByType(DocumentDao.TRANSFORM_NONE, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByType(final int transform, final String type)
    {
        return this.findByType(transform, -1, -1, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByType(final String queryString, final String type)
    {
        return (Collection<Document>)this.findByType(DocumentDao.TRANSFORM_NONE, queryString, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByType(final int pageNumber, final int pageSize, final String type)
    {
        return (Collection<Document>) this.findByType(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByType(final String queryString, final int pageNumber, final int pageSize, final String type)
    {
        return (Collection<Document>) this.findByType(DocumentDao.TRANSFORM_NONE, queryString, pageNumber, pageSize, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByType(final int transform, final String queryString, final String type)
    {
        return this.findByType(transform, queryString, -1, -1, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByType(final int transform, final int pageNumber, final int pageSize, final String type)
    {
        return this.findByType(transform, "from DocumentImpl as document where document.type = :type", pageNumber, pageSize, type);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByType(final int transform, final String queryString, int pageNumber, int pageSize, final String type)
    {
        Query queryObject = this.sessionFactory.getCurrentSession().createQuery(queryString);
            queryObject.setParameter("type", type);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            List results = queryObject.list();
            transformEntities(transform, results);
            return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReference(String type, Long reference)
    {
        return (Collection<Document>)this.findByTypeAndReference(DocumentDao.TRANSFORM_NONE, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByTypeAndReference(final int transform, final String type, final Long reference)
    {
        return this.findByTypeAndReference(transform, -1, -1, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReference(final String queryString, final String type, final Long reference)
    {
        return (Collection<Document>)this.findByTypeAndReference(DocumentDao.TRANSFORM_NONE, queryString, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReference(final int pageNumber, final int pageSize, final String type, final Long reference)
    {
        return (Collection<Document>) this.findByTypeAndReference(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReference(final String queryString, final int pageNumber, final int pageSize, final String type, final Long reference)
    {
        return (Collection<Document>) this.findByTypeAndReference(DocumentDao.TRANSFORM_NONE, queryString, pageNumber, pageSize, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByTypeAndReference(final int transform, final String queryString, final String type, final Long reference)
    {
        return this.findByTypeAndReference(transform, queryString, -1, -1, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByTypeAndReference(final int transform, final int pageNumber, final int pageSize, final String type, final Long reference)
    {
        return this.findByTypeAndReference(transform, "from DocumentImpl as document where document.type = :type and document.reference = :reference", pageNumber, pageSize, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByTypeAndReference(final int transform, final String queryString, int pageNumber, int pageSize, final String type, final Long reference)
    {
        Query queryObject = this.sessionFactory.getCurrentSession().createQuery(queryString);
            queryObject.setParameter("type", type);
            queryObject.setParameter("reference", reference);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            List results = queryObject.list();
            transformEntities(transform, results);
            return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordTypeReference(String type, Long reference)
    {
        return (Collection<Document>)this.findByRecordTypeReference(DocumentDao.TRANSFORM_NONE, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByRecordTypeReference(final int transform, final String type, final Long reference)
    {
        return this.findByRecordTypeReference(transform, -1, -1, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordTypeReference(final String queryString, final String type, final Long reference)
    {
        return (Collection<Document>)this.findByRecordTypeReference(DocumentDao.TRANSFORM_NONE, queryString, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordTypeReference(final int pageNumber, final int pageSize, final String type, final Long reference)
    {
        return (Collection<Document>) this.findByRecordTypeReference(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordTypeReference(final String queryString, final int pageNumber, final int pageSize, final String type, final Long reference)
    {
        return (Collection<Document>) this.findByRecordTypeReference(DocumentDao.TRANSFORM_NONE, queryString, pageNumber, pageSize, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByRecordTypeReference(final int transform, final String queryString, final String type, final Long reference)
    {
        return this.findByRecordTypeReference(transform, queryString, -1, -1, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByRecordTypeReference(final int transform, final int pageNumber, final int pageSize, final String type, final Long reference)
    {
        return this.findByRecordTypeReference(transform, "from DocumentImpl as document where document.type = :type and document.reference = :reference", pageNumber, pageSize, type, reference);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByRecordTypeReference(final int transform, final String queryString, int pageNumber, int pageSize, final String type, final Long reference)
    {
        Query queryObject = this.sessionFactory.getCurrentSession().createQuery(queryString);
            queryObject.setParameter("type", type);
            queryObject.setParameter("reference", reference);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            List results = queryObject.list();
            transformEntities(transform, results);
            return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReferenceAndRecordType(String type, Long reference, String recordType)
    {
        return (Collection<Document>)this.findByTypeAndReferenceAndRecordType(DocumentDao.TRANSFORM_NONE, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByTypeAndReferenceAndRecordType(final int transform, final String type, final Long reference, final String recordType)
    {
        return this.findByTypeAndReferenceAndRecordType(transform, -1, -1, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReferenceAndRecordType(final String queryString, final String type, final Long reference, final String recordType)
    {
        return (Collection<Document>)this.findByTypeAndReferenceAndRecordType(DocumentDao.TRANSFORM_NONE, queryString, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReferenceAndRecordType(final int pageNumber, final int pageSize, final String type, final Long reference, final String recordType)
    {
        return (Collection<Document>) this.findByTypeAndReferenceAndRecordType(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByTypeAndReferenceAndRecordType(final String queryString, final int pageNumber, final int pageSize, final String type, final Long reference, final String recordType)
    {
        return (Collection<Document>) this.findByTypeAndReferenceAndRecordType(DocumentDao.TRANSFORM_NONE, queryString, pageNumber, pageSize, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByTypeAndReferenceAndRecordType(final int transform, final String queryString, final String type, final Long reference, final String recordType)
    {
        return this.findByTypeAndReferenceAndRecordType(transform, queryString, -1, -1, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByTypeAndReferenceAndRecordType(final int transform, final int pageNumber, final int pageSize, final String type, final Long reference, final String recordType)
    {
        return this.findByTypeAndReferenceAndRecordType(transform, "from DocumentImpl as document where document.type = :type and document.reference = :reference and document.recordType = :recordType", pageNumber, pageSize, type, reference, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByTypeAndReferenceAndRecordType(final int transform, final String queryString, int pageNumber, int pageSize, final String type, final Long reference, final String recordType)
    {
        Query queryObject = this.sessionFactory.getCurrentSession().createQuery(queryString);
            queryObject.setParameter("type", type);
            queryObject.setParameter("reference", reference);
            queryObject.setParameter("recordType", recordType);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            List results = queryObject.list();
            transformEntities(transform, results);
            return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordType(String recordType)
    {
        return (Collection<Document>)this.findByRecordType(DocumentDao.TRANSFORM_NONE, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByRecordType(final int transform, final String recordType)
    {
        return this.findByRecordType(transform, -1, -1, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordType(final String queryString, final String recordType)
    {
        return (Collection<Document>)this.findByRecordType(DocumentDao.TRANSFORM_NONE, queryString, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordType(final int pageNumber, final int pageSize, final String recordType)
    {
        return (Collection<Document>) this.findByRecordType(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Document> findByRecordType(final String queryString, final int pageNumber, final int pageSize, final String recordType)
    {
        return (Collection<Document>) this.findByRecordType(DocumentDao.TRANSFORM_NONE, queryString, pageNumber, pageSize, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByRecordType(final int transform, final String queryString, final String recordType)
    {
        return this.findByRecordType(transform, queryString, -1, -1, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> findByRecordType(final int transform, final int pageNumber, final int pageSize, final String recordType)
    {
        return this.findByRecordType(transform, "from DocumentImpl as document where document.recordType = :recordType", pageNumber, pageSize, recordType);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<?> findByRecordType(final int transform, final String queryString, int pageNumber, int pageSize, final String recordType)
    {
        Query queryObject = this.sessionFactory.getCurrentSession().createQuery(queryString);
            queryObject.setParameter("recordType", recordType);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            List results = queryObject.list();
            transformEntities(transform, results);
            return results;
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>DocumentDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link Document} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link DocumentVO} - {@link #TRANSFORM_DOCUMENTVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link DocumentDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see DocumentDao#transformEntity(int, Document)
     */
    @Override
    public Object transformEntity(final int transform, final Document entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_DOCUMENTVO :
                    target = toDocumentVO(entity);
                    break;
                case DocumentDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case TRANSFORM_DOCUMENTVO :
                CollectionUtils.transform(entities, this.DOCUMENTVO_TRANSFORMER);
                break;
            case DocumentDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see DocumentDao#toEntities(Collection)
     */
    @Override
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link Document}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toEntity(rows);
                }
                else if (input instanceof Document)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return Document
     */
    protected Document toEntity(Object[] row)
    {
        Document target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof Document)
                {
                    target = (Document)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public final Collection<DocumentVO> toDocumentVOCollection(Collection<Document> entities)
    {
        if (entities == null)
        {
            return null;
        }
        @SuppressWarnings("rawtypes")
        Collection result = new ArrayList(entities);
        CollectionUtils.transform(result, this.DOCUMENTVO_TRANSFORMER);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public final DocumentVO[] toDocumentVOArray(Collection<?> entities)
    {
        DocumentVO[] result = null;
        if (entities != null)
        {
        @SuppressWarnings("rawtypes")
            final Collection collection = new ArrayList(entities);
            this.toDocumentVOCollection(collection);
            result = (DocumentVO[]) collection.toArray(new DocumentVO[collection.size()]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link DocumentDaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return toDocumentVO(this.toEntity(row))
     * @see DocumentDao#toDocumentVO(Document)
     */
    protected DocumentVO toDocumentVO(Object[] row)
    {
        return this.toDocumentVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link DocumentVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer DOCUMENTVO_TRANSFORMER =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Document)
                {
                    final Document entity = (Document)input;
                    result = toDocumentVO(entity);
                }
                else if (input instanceof Object[])
                {
                    final Object[] rows = (Object[])input;
                    result = toDocumentVO(rows);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    @Override
    public final void documentVOToEntityCollection(Collection<?> instances)
    {
        if (instances != null)
        {
            for (final Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof DocumentVO))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.DocumentVOToEntityTransformer);
        }
    }

    private final Transformer DocumentVOToEntityTransformer =
        new Transformer()
        {
            @Override
            public Object transform(Object input)
            {
                return documentVOToEntity((DocumentVO)input);
            }
        };


    /**
     * {@inheritDoc}
     */
    @Override
    public void toDocumentVO(
        Document source,
        DocumentVO target)
    {
        target.setId(source.getId());
        target.setDated(source.getDated());
        target.setReference(source.getReference());
        target.setName(source.getName());
        target.setDescription(source.getDescription());
        target.setExtension(source.getExtension());
        target.setGuid(source.getGuid());
        // No conversion for target.recordType (can't convert source.getRecordType():RecordType to String)
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentVO toDocumentVO(final Document entity)
    {
        DocumentVO target = null;
        if (entity != null)
        {
            target =  new DocumentVO();
            this.toDocumentVO(entity, target);
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void documentVOToEntity(
        DocumentVO source,
        Document target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getDated() != null)
        {
            target.setDated(source.getDated());
        }
        if (copyIfNull || source.getName() != null)
        {
            target.setName(source.getName());
        }
        if (copyIfNull || source.getExtension() != null)
        {
            target.setExtension(source.getExtension());
        }
        if (copyIfNull || source.getDescription() != null)
        {
            target.setDescription(source.getDescription());
        }
        if (copyIfNull || source.getReference() != null)
        {
            target.setReference(source.getReference());
        }
        if (copyIfNull || source.getGuid() != null)
        {
            target.setGuid(source.getGuid());
        }
        // No conversion for target.recordType (can't convert source.getRecordType():String to RecordType)
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search)
    {
        search.setPageNumber(pageNumber);
        search.setPageSize(pageSize);
        final PropertySearch propertySearch = new PropertySearch(
            this.sessionFactory.getCurrentSession(), DocumentImpl.class, search);
        final List<?> results = propertySearch.executeAsList();
        this.transformEntities(transform, results);
        return new PaginationResult(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search)
    {
        return this.search(DocumentDao.TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> search(final int transform, final Search search)
    {
        final PropertySearch propertySearch = new PropertySearch(
            this.sessionFactory.getCurrentSession(), DocumentImpl.class, search);
        final Collection<?> results = propertySearch.executeAsList();
        this.transformEntities(transform, results);
        return results;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Collection<Document> search(final Search search)
    {
        return (Collection<Document>) this.search(DocumentDao.TRANSFORM_NONE, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link PaginationResult} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return PaginationResult
     */
    @SuppressWarnings({ "unchecked" })
    protected PaginationResult getPaginationResult(
        final Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        final ScrollableResults scrollableResults = queryObject.scroll();
        scrollableResults.last();
        int totalCount = scrollableResults.getRowNumber();
        totalCount = totalCount >= 0 ? totalCount + 1 : 0;
        if (pageNumber > 0 && pageSize > 0)
        {
            queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
            queryObject.setMaxResults(pageSize);
        }
        // Unchecked transformation because Set object is reused, cannot be strongly typed.
        @SuppressWarnings("rawtypes")
        Collection results = new ArrayList(queryObject.list());
        transformEntities(transform, results);
        return new PaginationResult(results.toArray(new Object[results.size()]), totalCount);
    }


    /**
     * Create or Update the <code>document</code> instance in the persistent store.
     * @param document
     */
    @Override
    public Document createOrUpdate(Document document)
    {
        if(document.getId() == null)
        {
            return (Document)this.create(TRANSFORM_NONE,document);
        }
        this.update(document);
        return document;
    }

    // spring-hibernate-dao-base merge-point
}