// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringServiceBase.vsl in andromda-spring-cartridge on 04/03/2022 18:05:31+0300. Do not modify by hand!.
//
/**
 * TEMPLATE:    SpringServiceBase.vsl in andromda-spring cartridge
 * MODEL CLASS: AndroMDAModel::org.fidelis.animal::model::animal::AnimalService
 * STEREOTYPE:  Service
 */
package org.fidelis.animal.model.animal;

import java.security.Principal;
import java.util.Collection;
import java.util.Date;
import java.util.Locale;
import org.fidelis.animal.BeanLocator;
import org.fidelis.animal.PrincipalStore;
import org.fidelis.animal.model.feed.FeedDao;
import org.springframework.context.MessageSource;

/**
 * <p>
 * Spring Service base class for <code>AnimalService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see AnimalService
 */
public abstract class AnimalServiceBase
    implements AnimalService
{
    private AnimalDao animalDao;

    /**
     * Sets the reference to <code>animal</code>'s DAO.
     * @param animalDaoIn
     */
    public void setAnimalDao(AnimalDao animalDaoIn)
    {
        this.animalDao = animalDaoIn;
    }

    /**
     * Gets the reference to <code>animal</code>'s DAO.
     * @return animalDao
     */
    protected AnimalDao getAnimalDao()
    {
        return this.animalDao;
    }

    private FeedDao feedDao;

    /**
     * Sets the reference to <code>feed</code>'s DAO.
     * @param feedDaoIn
     */
    public void setFeedDao(FeedDao feedDaoIn)
    {
        this.feedDao = feedDaoIn;
    }

    /**
     * Gets the reference to <code>feed</code>'s DAO.
     * @return feedDao
     */
    protected FeedDao getFeedDao()
    {
        return this.feedDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection search(final String type, final Date startDate, final Date endDate, final String breed, final Long limit)
    {
        try
        {
            return this.handleSearch(type, startDate, endDate, breed, limit);
        }
        catch (Throwable th)
        {
            throw new AnimalServiceException(
                "Error performing 'AnimalService.search(String type, Date startDate, Date endDate, String breed, Long limit)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #search(String, Date, Date, String, Long)}
     * @param type String TODO: Model Documentation for AnimalService.search(type)
     * @param startDate Date TODO: Model Documentation for AnimalService.search(startDate)
     * @param endDate Date TODO: Model Documentation for AnimalService.search(endDate)
     * @param breed String TODO: Model Documentation for AnimalService.search(breed)
     * @param limit Long TODO: Model Documentation for AnimalService.search(limit)
     * @return Collection
     * @throws Exception
     */
    protected abstract Collection handleSearch(String type, Date startDate, Date endDate, String breed, Long limit)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection loadAll()
    {
        try
        {
            return this.handleLoadAll();
        }
        catch (Throwable th)
        {
            throw new AnimalServiceException(
                "Error performing 'AnimalService.loadAll()' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #loadAll()}
     * @return Collection
     * @throws Exception
     */
    protected abstract Collection handleLoadAll()
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public AnimalVO load(final Long id)
    {
        try
        {
            return this.handleLoad(id);
        }
        catch (Throwable th)
        {
            throw new AnimalServiceException(
                "Error performing 'AnimalService.load(Long id)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #load(Long)}
     * @param id Long TODO: Model Documentation for AnimalService.load(id)
     * @return AnimalVO
     * @throws Exception
     */
    protected abstract AnimalVO handleLoad(Long id)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public Long add(final String type, final Date dateOfBirth, final Long feed, final String breed)
    {
        if (type == null || type.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "org.fidelis.animal.model.animal.AnimalService.add(String type, Date dateOfBirth, Long feed, String breed) - 'type' can not be null or empty");
        }
        try
        {
            return this.handleAdd(type, dateOfBirth, feed, breed);
        }
        catch (Throwable th)
        {
            throw new AnimalServiceException(
                "Error performing 'AnimalService.add(String type, Date dateOfBirth, Long feed, String breed)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #add(String, Date, Long, String)}
     * @param type String TODO: Model Documentation for AnimalService.add(type)
     * @param dateOfBirth Date TODO: Model Documentation for AnimalService.add(dateOfBirth)
     * @param feed Long TODO: Model Documentation for AnimalService.add(feed)
     * @param breed String TODO: Model Documentation for AnimalService.add(breed)
     * @return Long
     * @throws Exception
     */
    protected abstract Long handleAdd(String type, Date dateOfBirth, Long feed, String breed)
        throws Exception;

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Long id, final Date dateOfBirth, final String type, final Long feed, final String breed)
    {
        if (type == null || type.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "org.fidelis.animal.model.animal.AnimalService.update(Long id, Date dateOfBirth, String type, Long feed, String breed) - 'type' can not be null or empty");
        }
        try
        {
            this.handleUpdate(id, dateOfBirth, type, feed, breed);
        }
        catch (Throwable th)
        {
            throw new AnimalServiceException(
                "Error performing 'AnimalService.update(Long id, Date dateOfBirth, String type, Long feed, String breed)' --> " + th,
                th);
        }
    }

    /**
     * Performs the core logic for {@link #update(Long, Date, String, Long, String)}
     * @param id Long TODO: Model Documentation for AnimalService.update(id)
     * @param dateOfBirth Date TODO: Model Documentation for AnimalService.update(dateOfBirth)
     * @param type String TODO: Model Documentation for AnimalService.update(type)
     * @param feed Long TODO: Model Documentation for AnimalService.update(feed)
     * @param breed String TODO: Model Documentation for AnimalService.update(breed)
     * @return void
     * @throws Exception
     */
    protected abstract void handleUpdate(Long id, Date dateOfBirth, String type, Long feed, String breed)
        throws Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     * @return MessageSource
     */
    protected MessageSource getMessages()
    {
        return (MessageSource)
            BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @return String
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @return String
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     * @return String
     */
    protected String getMessage(
        final String key, final Object[] arguments,
        final Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }


// spring-service-base merge-point
}